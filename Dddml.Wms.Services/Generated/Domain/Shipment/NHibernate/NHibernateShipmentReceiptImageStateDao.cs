// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentDomainNHibernate.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Shipment;
using Dddml.Wms.Specialization.NHibernate;
using NHibernate;
using NHibernate.Criterion;
using Spring.Transaction.Interceptor;

namespace Dddml.Wms.Domain.Shipment.NHibernate
{

	public class NHibernateShipmentReceiptImageStateDao : IShipmentReceiptImageStateDao
	{
		public ISessionFactory SessionFactory { get; set; }

		protected ISession CurrentSession {
			get { return this.SessionFactory.GetCurrentSession (); }
		}

        private static readonly ISet<string> _readOnlyPropertyNames = new SortedSet<string>(new String[] { "SequenceId", "Url", "Version", "CreatedBy", "CreatedAt", "UpdatedBy", "UpdatedAt", "Active", "Deleted", "ShipmentId", "ShipmentReceiptReceiptSeqId" });
    
        public IReadOnlyProxyGenerator ReadOnlyProxyGenerator { get; set; }

		public NHibernateShipmentReceiptImageStateDao()
		{
		}

        [Transaction(ReadOnly = true)]
        public IShipmentReceiptImageState Get(ShipmentReceiptImageId id, bool nullAllowed)
        {
            IShipmentReceiptImageState state = CurrentSession.Get<ShipmentReceiptImageState>(id);
            if (!nullAllowed && state == null)
            {
                state = new ShipmentReceiptImageState();
                (state as ShipmentReceiptImageState).ShipmentReceiptImageId = id;
            }
            if (ReadOnlyProxyGenerator != null && state != null)
            {
                return ReadOnlyProxyGenerator.CreateProxy<IShipmentReceiptImageState>(state, new Type[] {  }, _readOnlyPropertyNames);
            }
            return state;
        }

       
        public void Save(IShipmentReceiptImageState state)
        {
            IShipmentReceiptImageState s = state;
            if (ReadOnlyProxyGenerator != null)
            {
                s = ReadOnlyProxyGenerator.GetTarget<IShipmentReceiptImageState>(state);
            }
            CurrentSession.SaveOrUpdate(s);
            var saveable = s as ISaveable;
            if (saveable != null)
            {
                saveable.Save();
            }
        }


        public void Delete(IShipmentReceiptImageState state)
        {
            IShipmentReceiptImageState s = state;
            if (ReadOnlyProxyGenerator != null)
            {
                s = ReadOnlyProxyGenerator.GetTarget<IShipmentReceiptImageState>(state);
            }
            var saveable = s as ISaveable;
            if (saveable != null)
            {
                saveable.Save();
            }
            CurrentSession.Delete(s);
        }


        [Transaction(ReadOnly = true)]
        public IEnumerable<IShipmentReceiptImageState> FindByShipmentIdAndShipmentReceiptReceiptSeqId(string shipmentId, string shipmentReceiptReceiptSeqId)
        {
            var criteria = CurrentSession.CreateCriteria<ShipmentReceiptImageState>();
            var partIdCondition = Restrictions.Conjunction()
                .Add(Restrictions.Eq("ShipmentReceiptImageId.ShipmentId", shipmentId))
                .Add(Restrictions.Eq("ShipmentReceiptImageId.ShipmentReceiptReceiptSeqId", shipmentReceiptReceiptSeqId))
                ;

            return criteria.Add(partIdCondition).List<ShipmentReceiptImageState>();
        }

    }

	
}

