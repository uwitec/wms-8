// <autogenerated>
//   This file was generated by T4 code generator GenerateGoodIdentificationMvoDomainNHibernate.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.GoodIdentificationMvo;
using Dddml.Wms.Domain.Product;
using Dddml.Wms.Specialization.NHibernate;
using NHibernate;
using NHibernate.Criterion;
using Spring.Transaction.Interceptor;
using Dddml.Support.Criterion;
using NHibernateICriterion = NHibernate.Criterion.ICriterion;
using NHibernateRestrictions = NHibernate.Criterion.Restrictions;
using NHibernateDisjunction = NHibernate.Criterion.Disjunction;

namespace Dddml.Wms.Domain.GoodIdentificationMvo.NHibernate
{

	public partial class NHibernateGoodIdentificationMvoStateRepository : IGoodIdentificationMvoStateRepository
	{
		public ISessionFactory SessionFactory { get; set; }

		protected ISession CurrentSession {
			get { return this.SessionFactory.GetCurrentSession (); }
		}

        private static readonly ISet<string> _readOnlyPropertyNames = new SortedSet<string>(new String[] { "ProductGoodIdentificationId", "IdValue", "Version", "CreatedBy", "CreatedAt", "UpdatedBy", "UpdatedAt", "Active", "Deleted", "ProductProductTypeId", "ProductPrimaryProductCategoryId", "ProductManufacturerPartyId", "ProductFacilityId", "ProductIntroductionDate", "ProductReleaseDate", "ProductSupportDiscontinuationDate", "ProductSalesDiscontinuationDate", "ProductSalesDiscWhenNotAvail", "ProductInternalName", "ProductBrandName", "ProductComments", "ProductProductName", "ProductDescription", "ProductPriceDetailText", "ProductSmallImageUrl", "ProductMediumImageUrl", "ProductLargeImageUrl", "ProductDetailImageUrl", "ProductOriginalImageUrl", "ProductDetailScreen", "ProductInventoryMessage", "ProductInventoryItemTypeId", "ProductRequireInventory", "ProductQuantityUomId", "ProductQuantityIncluded", "ProductPiecesIncluded", "ProductRequireAmount", "ProductFixedAmount", "ProductAmountUomTypeId", "ProductWeightUomId", "ProductShippingWeight", "ProductProductWeight", "ProductHeightUomId", "ProductProductHeight", "ProductShippingHeight", "ProductWidthUomId", "ProductProductWidth", "ProductShippingWidth", "ProductDepthUomId", "ProductProductDepth", "ProductShippingDepth", "ProductDiameterUomId", "ProductProductDiameter", "ProductProductRating", "ProductRatingTypeEnum", "ProductReturnable", "ProductTaxable", "ProductChargeShipping", "ProductAutoCreateKeywords", "ProductIncludeInPromotions", "ProductIsVirtual", "ProductIsVariant", "ProductVirtualVariantMethodEnum", "ProductInShippingBox", "ProductDefaultShipmentBoxTypeId", "ProductIsSerialNumbered", "ProductIsManagedByLot", "ProductAttributeSetId", "ProductAttributeSetInstanceId", "ProductGoodIdentifications", "ProductVersion", "ProductCreatedBy", "ProductCreatedAt", "ProductUpdatedBy", "ProductUpdatedAt", "ProductActive" });
    
        public IReadOnlyProxyGenerator ReadOnlyProxyGenerator { get; set; }

		public NHibernateGoodIdentificationMvoStateRepository()
		{
		}

		[Transaction (ReadOnly = true)]
		public IGoodIdentificationMvoState Get(ProductGoodIdentificationId id, bool nullAllowed)
		{
			IGoodIdentificationMvoState state = CurrentSession.Get<GoodIdentificationMvoState> (id);
			if (!nullAllowed && state == null) {
				state = new GoodIdentificationMvoState ();
				(state as GoodIdentificationMvoState).ProductGoodIdentificationId = id;
			}
            if (ReadOnlyProxyGenerator != null && state != null)
            {
                return ReadOnlyProxyGenerator.CreateProxy<IGoodIdentificationMvoState>(state, new Type[] {  }, _readOnlyPropertyNames);
            }
			return state;
		}

		[Transaction]
		public void Save(IGoodIdentificationMvoState state)
		{
            IGoodIdentificationMvoState s = state;
            if (ReadOnlyProxyGenerator != null)
            {
                s = ReadOnlyProxyGenerator.GetTarget<IGoodIdentificationMvoState>(state);
            }
			CurrentSession.SaveOrUpdate (s);

			var saveable = s as ISaveable;
			if (saveable != null) {
				saveable.Save ();
			}
            CurrentSession.Flush();
		}

        //protected static void AddNotDeletedRestriction(ICriteria criteria)
        //{
        //    criteria.Add(NHibernateRestrictions.Eq("Deleted", false));
        //}

	}
}

