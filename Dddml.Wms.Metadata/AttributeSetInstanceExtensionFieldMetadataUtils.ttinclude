<#@ assembly name="%DddmlDotNetToolsSolutionDir%\Dddml.Core\bin\Debug\Dddml.Core.dll" #>
<#@ assembly name="%DddmlDotNetToolsSolutionDir%\Dddml.Serialization\bin\Debug\Dddml.Serialization.dll" #>
<#@ assembly name="%DddmlDotNetToolsSolutionDir%\Dddml.T4\bin\Debug\Dddml.T4.dll" #>
<#@ assembly name="%DddmlDotNetToolsSolutionDir%\packages\YamlDotNet.3.8.0\lib\net35\YamlDotNet.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Dddml.Core.Dom" #>
<#@ import namespace="Dddml.Serialization" #>
<#@ import namespace="Dddml.T4" #>
<#@ import namespace="Dddml.T4.Extensions" #>
<#@ import namespace="Dddml.T4.Generator" #>

<#+

    public static class AttributeSetInstanceExtensionFieldMetadataUtils
    {
     
        public static ISet<string> ReservedFieldNames = new SortedSet<string>(new string[] {
            "AttributeSetInstanceId",
            "AttributeSetId",
            "OrganizationId",
            "ReferenceId",
            "SerialNumber",
            "LotId",
            "Description",
            "Hash",
            });

        // //////////////////////////////////////////
        // 分组的扩展字段
        // //////////////////////////////////////////
		static IList<ExtensionFieldGroupMetadata> extensionFieldGroups = new ExtensionFieldGroupMetadata[] {
                new ExtensionFieldGroupMetadata("_F_B_", "_", "bool?", 5, null),
                new ExtensionFieldGroupMetadata("_F_I_", "_", "int?", 5, null),
                new ExtensionFieldGroupMetadata("_F_L_", "_", "long?", 5, null),
                new ExtensionFieldGroupMetadata("_F_DT_", "_", "DateTime?", 5, null),
                new ExtensionFieldGroupMetadata("_F_N_", "_", "decimal?", 5, null),
                new ExtensionFieldGroupMetadata("_F_C5_", "_", "string", 5, 5),
                new ExtensionFieldGroupMetadata("_F_C10_", "_", "string", 5, 10),
                new ExtensionFieldGroupMetadata("_F_C20_", "_", "string", 5, 20),
                new ExtensionFieldGroupMetadata("_F_C50_", "_", "string", 5, 50),
                new ExtensionFieldGroupMetadata("_F_C100_", "_", "string", 2, 100),
                new ExtensionFieldGroupMetadata("_F_C200_", "_", "string", 2, 200),
                new ExtensionFieldGroupMetadata("_F_C500_", "_", "string", 1, 500),
                new ExtensionFieldGroupMetadata("_F_C1000_", "_", "string", 1, 1000),
            };    

        

        public static IList<ExtensionFieldGroupMetadata> GetExtensionFieldGroups()
		{
			return extensionFieldGroups;
		}

        public static IList<ExtensionFieldMetadata> GetAllExtensionFields()
        {

            var fields = new List<ExtensionFieldMetadata>();
            fields.AddRange(new ExtensionFieldMetadata[] 
            {
                // ////////////////////////////////////
                // 名称更具可读性的扩展字段
                // ////////////////////////////////////
new ExtensionFieldMetadata("WidthInch", "decimal?", null),
new ExtensionFieldMetadata("DiameterInch", "decimal?", null),
new ExtensionFieldMetadata("WeightLbs", "decimal?", null),
new ExtensionFieldMetadata("WeightKg", "decimal?", null),
new ExtensionFieldMetadata("AirDryWeightLbs", "decimal?", null),
new ExtensionFieldMetadata("AirDryWeightKg", "decimal?", null),
new ExtensionFieldMetadata("AirDryMetricTon", "decimal?", null),
new ExtensionFieldMetadata("RollCnt", "int?", null),
new ExtensionFieldMetadata("AirDryPct", "decimal?", null),
                // ////////////////////////////////////
            });

            for (int i = 0; i < 1000; i++)
            {
                for (int iG = 0; iG < extensionFieldGroups.Count; iG++)
                {
                    var grp = extensionFieldGroups[iG];
                    if (i < grp.FieldCount)
                    {
                        fields.Add(grp.CreateExtensionFieldMetadata(i, grp.NamePrefix));
                    }
                }
            }

            return fields;

        }

    }
#>
