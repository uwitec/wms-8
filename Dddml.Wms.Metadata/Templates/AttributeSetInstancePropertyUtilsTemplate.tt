<#@ template language="C#" debug="True" #>
<#@ include file="T4Toolbox.tt" #>
<#+
// <copyright file="AttributeSetInstanceExtensionFieldUtilsTemplate.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

public class AttributeSetInstancePropertyUtilsTemplate : CSharpTemplate
{
    IList<ExtensionFieldMetadata> _extensionFields;

    public AttributeSetInstancePropertyUtilsTemplate(IList<ExtensionFieldMetadata> extensionFields)
    {
        this._extensionFields = extensionFields;
    }

	public override string TransformText()
	{
		base.TransformText();

#>
using System;
using System.Collections.Generic;
using System.Security.Cryptography;
using System.Text;
using System.Linq;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.AttributeSetInstance;


namespace Dddml.Wms.Support
{
    public static class AttributeSetInstancePropertyUtils
    {

        private static string GetSafeStringValue(string str)
        {
            if (str == null) { return "[null]"; }
            return str;
        }

        private static string GetSafeStringsValue(ISet<string> strs)
        {
            if (strs == null) { return "[null]"; } 
            var strList = strs.ToList();
            strList.Sort((s1, s2) => s1.CompareTo(s2));
            var res = strList.Aggregate("", (a, s) => a + "\n" + s);
            return res;
        }

        private static string GetMD5HashString(MD5 md5Hash, string input)
        {
            byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));
            StringBuilder sBuilder = new StringBuilder();
            for (int i = 0; i < data.Length; i++)
            {
                sBuilder.Append(data[i].ToString("x2"));
            }
            return sBuilder.ToString();
        }

<#+
		var getHashParameterTypeNames = new string[] {"ICreateAttributeSetInstance", "IAttributeSetInstanceStateCreated", "IAttributeSetInstanceStateProperties" };
		foreach (var pTypeName in getHashParameterTypeNames)
		{
#>
        public static string GetHash(<#= pTypeName #> state)
        {
            StringBuilder sb = new StringBuilder();

            sb.Append("AttributeSetId").Append("=").Append(GetSafeStringValue(state.AttributeSetId)).Append("|");
            sb.Append("OrganizationId").Append("=").Append(GetSafeStringValue(state.OrganizationId)).Append("|");
            sb.Append("ReferenceId").Append("=").Append(GetSafeStringValue(state.ReferenceId)).Append("|");
            sb.Append("SerialNumber").Append("=").Append(GetSafeStringValue(state.SerialNumber)).Append("|");
            sb.Append("LotId").Append("=").Append(GetSafeStringValue(state.LotId)).Append("|");
            sb.Append("ImageUrl").Append("=").Append(GetSafeStringValue(state.ImageUrl)).Append("|");
            sb.Append("StatusIds").Append("=").Append(GetSafeStringsValue(state.StatusIds)).Append("|");
            sb.Append("Description").Append("=").Append(GetSafeStringValue(state.Description)).Append("|");
            sb.Append("Active").Append("=").Append(state.Active).Append("|");
<#+ 
			foreach (var fMeta in _extensionFields)
			{
				if (fMeta.Type.Equals("string", StringComparison.InvariantCultureIgnoreCase))
				{ 
#>
            sb.Append("<#= fMeta.Name #>").Append("=").Append(GetSafeStringValue(state.<#= fMeta.Name #>)).Append("|");
<#+
				} else {
#>
            sb.Append("<#= fMeta.Name #>").Append("=").Append(state.<#= fMeta.Name #>).Append("|");
<#+ 
				}
			}
#>

            using (MD5 md5Hash = MD5.Create())
            {
                string hash = GetMD5HashString(md5Hash, sb.ToString());
                return hash;
            }
        }

<#+
		}
#>

        public static bool Equals(ICreateAttributeSetInstance state1, IAttributeSetInstanceStateProperties state2)
        {
            if (!SafeEquals<string>(state1.AttributeSetId, state2.AttributeSetId)
                || !SafeEquals<string>(state1.OrganizationId, state2.OrganizationId)
                || !SafeEquals<string>(state1.ReferenceId, state2.ReferenceId)
                || !SafeEquals<string>(state1.SerialNumber, state2.SerialNumber)
                || !SafeEquals<string>(state1.LotId, state2.LotId)
                || !SafeEquals(state1.StatusIds, state2.StatusIds)
                || !SafeEquals<string>(state1.ImageUrl, state2.ImageUrl)
                || !SafeEquals<string>(state1.Description, state2.Description)
                || !SafeEquals<bool>(state1.Active, state2.Active)
<#+ 
		foreach (var fMeta in _extensionFields)
		{
			var ft = fMeta.Type.EndsWith("?") ? fMeta.Type.Substring(0, fMeta.Type.Length - 1) : fMeta.Type;
#>
                || !SafeEquals<<#= ft #>>(state1.<#= fMeta.Name #>, state2.<#= fMeta.Name #>)
<#+ 
		}
#>
                )
            {
                return false;
            }
            return true;
        }

        private static bool SafeEquals<T>(object obj1, object obj2)
        {
            return Object.Equals((obj1 == null ? default(T) : obj1), obj2 == null ? default(T) : obj2);
        }

        private static bool SafeEquals(ISet<string> strs1, ISet<string> strs2)
        {
            if (Object.Equals(strs1, strs2)) { return true; }
            if (strs1 == null || strs2 == null) { return false; }
            if (strs1.Count != strs2.Count) { return false; }
            foreach (var s in strs1)
            {
                if (!strs2.Contains(s)) { return false; }
            }
            return true;
        }

    }

}


<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
