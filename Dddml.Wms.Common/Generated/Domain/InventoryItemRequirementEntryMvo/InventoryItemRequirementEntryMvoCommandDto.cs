// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemRequirementEntryMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItemRequirementEntryMvo;
using Dddml.Wms.Domain.InventoryItemRequirement;
using Dddml.Wms.Domain.InventoryPRTriggered;

namespace Dddml.Wms.Domain.InventoryItemRequirementEntryMvo
{

	public abstract class InventoryItemRequirementEntryMvoCommandDtoBase : ICommandDto, ICreateInventoryItemRequirementEntryMvo, IMergePatchInventoryItemRequirementEntryMvo, IDeleteInventoryItemRequirementEntryMvo
	{

		InventoryItemRequirementEntryId IAggregateCommand<InventoryItemRequirementEntryId, long>.AggregateId
		{
			get
			{
				return ((ICreateOrMergePatchOrDeleteInventoryItemRequirementEntryMvo)this).InventoryItemRequirementEntryId;
			}
		}


		long IAggregateCommand<InventoryItemRequirementEntryId, long>.AggregateVersion
		{
			get
			{
				return this.InventoryItemRequirementVersion != null ? this.InventoryItemRequirementVersion.Value : default(long);
			}
		}

        long IInventoryItemRequirementEntryMvoCommand.InventoryItemRequirementVersion
        {
            get { return this.InventoryItemRequirementVersion != null ? this.InventoryItemRequirementVersion.Value : default(long); }
            set { this.InventoryItemRequirementVersion = value; }
        }

		public virtual long? InventoryItemRequirementVersion { get; set; }

		public virtual string RequesterId { get; set; }

		public virtual string CommandId { get; set; }

        object ICommand.RequesterId
        {
            get { return this.RequesterId; }
            set { this.RequesterId = (string)value; }
        }

        string ICommand.CommandId
        {
            get { return this.CommandId; }
            set { this.CommandId = value; }
        }

		public virtual InventoryItemRequirementEntryId InventoryItemRequirementEntryId { get; set; }

		public virtual decimal? Quantity { get; set; }

		public virtual InventoryPRTriggeredId SourceEventId { get; set; }

		public virtual long? Version { get; set; }

		public virtual bool? Active { get; set; }

		public virtual decimal? InventoryItemRequirementQuantity { get; set; }

		public virtual string InventoryItemRequirementCreatedBy { get; set; }

		public virtual DateTime? InventoryItemRequirementCreatedAt { get; set; }

		public virtual string InventoryItemRequirementUpdatedBy { get; set; }

		public virtual DateTime? InventoryItemRequirementUpdatedAt { get; set; }

		public virtual bool? IsPropertyQuantityRemoved { get; set; }

        bool IMergePatchInventoryItemRequirementEntryMvo.IsPropertyQuantityRemoved
        {
            get
            {
                var b = this.IsPropertyQuantityRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyQuantityRemoved = value;
            }
        }

		public virtual bool? IsPropertySourceEventIdRemoved { get; set; }

        bool IMergePatchInventoryItemRequirementEntryMvo.IsPropertySourceEventIdRemoved
        {
            get
            {
                var b = this.IsPropertySourceEventIdRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertySourceEventIdRemoved = value;
            }
        }

		public virtual bool? IsPropertyVersionRemoved { get; set; }

        bool IMergePatchInventoryItemRequirementEntryMvo.IsPropertyVersionRemoved
        {
            get
            {
                var b = this.IsPropertyVersionRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyVersionRemoved = value;
            }
        }

		public virtual bool? IsPropertyActiveRemoved { get; set; }

        bool IMergePatchInventoryItemRequirementEntryMvo.IsPropertyActiveRemoved
        {
            get
            {
                var b = this.IsPropertyActiveRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyActiveRemoved = value;
            }
        }

		public virtual bool? IsPropertyInventoryItemRequirementQuantityRemoved { get; set; }

        bool IMergePatchInventoryItemRequirementEntryMvo.IsPropertyInventoryItemRequirementQuantityRemoved
        {
            get
            {
                var b = this.IsPropertyInventoryItemRequirementQuantityRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyInventoryItemRequirementQuantityRemoved = value;
            }
        }

		public virtual bool? IsPropertyInventoryItemRequirementCreatedByRemoved { get; set; }

        bool IMergePatchInventoryItemRequirementEntryMvo.IsPropertyInventoryItemRequirementCreatedByRemoved
        {
            get
            {
                var b = this.IsPropertyInventoryItemRequirementCreatedByRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyInventoryItemRequirementCreatedByRemoved = value;
            }
        }

		public virtual bool? IsPropertyInventoryItemRequirementCreatedAtRemoved { get; set; }

        bool IMergePatchInventoryItemRequirementEntryMvo.IsPropertyInventoryItemRequirementCreatedAtRemoved
        {
            get
            {
                var b = this.IsPropertyInventoryItemRequirementCreatedAtRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyInventoryItemRequirementCreatedAtRemoved = value;
            }
        }

		public virtual bool? IsPropertyInventoryItemRequirementUpdatedByRemoved { get; set; }

        bool IMergePatchInventoryItemRequirementEntryMvo.IsPropertyInventoryItemRequirementUpdatedByRemoved
        {
            get
            {
                var b = this.IsPropertyInventoryItemRequirementUpdatedByRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyInventoryItemRequirementUpdatedByRemoved = value;
            }
        }

		public virtual bool? IsPropertyInventoryItemRequirementUpdatedAtRemoved { get; set; }

        bool IMergePatchInventoryItemRequirementEntryMvo.IsPropertyInventoryItemRequirementUpdatedAtRemoved
        {
            get
            {
                var b = this.IsPropertyInventoryItemRequirementUpdatedAtRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyInventoryItemRequirementUpdatedAtRemoved = value;
            }
        }


        string ICommandDto.CommandType 
        {
            get { return this.GetCommandType(); }
        }

        protected abstract string GetCommandType();

	}


    public class CreateOrMergePatchOrDeleteInventoryItemRequirementEntryMvoDto : InventoryItemRequirementEntryMvoCommandDtoBase
    {
        private string _commandType;

        public virtual string CommandType
        {
            get { return _commandType; }
            set { _commandType = value; }
        }

        protected override string GetCommandType()
        {
            return this._commandType;
        }

    }



	public class CreateInventoryItemRequirementEntryMvoDto : CreateOrMergePatchOrDeleteInventoryItemRequirementEntryMvoDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Create;
        }

	}


	public class MergePatchInventoryItemRequirementEntryMvoDto : CreateOrMergePatchOrDeleteInventoryItemRequirementEntryMvoDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.MergePatch;
        }

	}

	public class DeleteInventoryItemRequirementEntryMvoDto : CreateOrMergePatchOrDeleteInventoryItemRequirementEntryMvoDto
	{
        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Delete;
        }


        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

	}

    public static partial class InventoryItemRequirementEntryMvoCommandDtos
    {

    }

}

