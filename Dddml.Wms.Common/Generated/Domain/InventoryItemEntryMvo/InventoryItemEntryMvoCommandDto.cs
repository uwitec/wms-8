// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemEntryMvoDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItemEntryMvo;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.InventoryItemEntryMvo
{

	public abstract class InventoryItemEntryMvoCommandDtoBase : ICommandDto, ICreateInventoryItemEntryMvo, IMergePatchInventoryItemEntryMvo, IDeleteInventoryItemEntryMvo
	{

		InventoryItemEntryId IAggregateCommand<InventoryItemEntryId, long>.AggregateId
		{
			get
			{
				return ((ICreateOrMergePatchOrDeleteInventoryItemEntryMvo)this).InventoryItemEntryId;
			}
		}


		long IAggregateCommand<InventoryItemEntryId, long>.AggregateVersion
		{
			get
			{
				return this.InventoryItemVersion != null ? this.InventoryItemVersion.Value : default(long);
			}
		}

        long IInventoryItemEntryMvoCommand.InventoryItemVersion
        {
            get { return this.InventoryItemVersion != null ? this.InventoryItemVersion.Value : default(long); }
            set { this.InventoryItemVersion = value; }
        }

		public virtual long? InventoryItemVersion { get; set; }

		public virtual string RequesterId { get; set; }

		public virtual string CommandId { get; set; }

        object ICommand.RequesterId
        {
            get { return this.RequesterId; }
            set { this.RequesterId = (string)value; }
        }

        string ICommand.CommandId
        {
            get { return this.CommandId; }
            set { this.CommandId = value; }
        }

		public virtual InventoryItemEntryId InventoryItemEntryId { get; set; }

		public virtual decimal? OnHandQuantity { get; set; }

		public virtual decimal? InTransitQuantity { get; set; }

		public virtual decimal? ReservedQuantity { get; set; }

		public virtual decimal? OccupiedQuantity { get; set; }

		public virtual decimal? VirtualQuantity { get; set; }

		public virtual InventoryItemSourceInfo Source { get; set; }

		public virtual long? Version { get; set; }

		public virtual bool? Active { get; set; }

		public virtual decimal? InventoryItemOnHandQuantity { get; set; }

		public virtual decimal? InventoryItemInTransitQuantity { get; set; }

		public virtual decimal? InventoryItemReservedQuantity { get; set; }

		public virtual decimal? InventoryItemOccupiedQuantity { get; set; }

		public virtual decimal? InventoryItemVirtualQuantity { get; set; }

		public virtual string InventoryItemCreatedBy { get; set; }

		public virtual DateTime? InventoryItemCreatedAt { get; set; }

		public virtual string InventoryItemUpdatedBy { get; set; }

		public virtual DateTime? InventoryItemUpdatedAt { get; set; }

		public virtual bool? IsPropertyOnHandQuantityRemoved { get; set; }

        bool IMergePatchInventoryItemEntryMvo.IsPropertyOnHandQuantityRemoved
        {
            get
            {
                var b = this.IsPropertyOnHandQuantityRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyOnHandQuantityRemoved = value;
            }
        }

		public virtual bool? IsPropertyInTransitQuantityRemoved { get; set; }

        bool IMergePatchInventoryItemEntryMvo.IsPropertyInTransitQuantityRemoved
        {
            get
            {
                var b = this.IsPropertyInTransitQuantityRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyInTransitQuantityRemoved = value;
            }
        }

		public virtual bool? IsPropertyReservedQuantityRemoved { get; set; }

        bool IMergePatchInventoryItemEntryMvo.IsPropertyReservedQuantityRemoved
        {
            get
            {
                var b = this.IsPropertyReservedQuantityRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyReservedQuantityRemoved = value;
            }
        }

		public virtual bool? IsPropertyOccupiedQuantityRemoved { get; set; }

        bool IMergePatchInventoryItemEntryMvo.IsPropertyOccupiedQuantityRemoved
        {
            get
            {
                var b = this.IsPropertyOccupiedQuantityRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyOccupiedQuantityRemoved = value;
            }
        }

		public virtual bool? IsPropertyVirtualQuantityRemoved { get; set; }

        bool IMergePatchInventoryItemEntryMvo.IsPropertyVirtualQuantityRemoved
        {
            get
            {
                var b = this.IsPropertyVirtualQuantityRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyVirtualQuantityRemoved = value;
            }
        }

		public virtual bool? IsPropertySourceRemoved { get; set; }

        bool IMergePatchInventoryItemEntryMvo.IsPropertySourceRemoved
        {
            get
            {
                var b = this.IsPropertySourceRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertySourceRemoved = value;
            }
        }

		public virtual bool? IsPropertyVersionRemoved { get; set; }

        bool IMergePatchInventoryItemEntryMvo.IsPropertyVersionRemoved
        {
            get
            {
                var b = this.IsPropertyVersionRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyVersionRemoved = value;
            }
        }

		public virtual bool? IsPropertyActiveRemoved { get; set; }

        bool IMergePatchInventoryItemEntryMvo.IsPropertyActiveRemoved
        {
            get
            {
                var b = this.IsPropertyActiveRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyActiveRemoved = value;
            }
        }

		public virtual bool? IsPropertyInventoryItemOnHandQuantityRemoved { get; set; }

        bool IMergePatchInventoryItemEntryMvo.IsPropertyInventoryItemOnHandQuantityRemoved
        {
            get
            {
                var b = this.IsPropertyInventoryItemOnHandQuantityRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyInventoryItemOnHandQuantityRemoved = value;
            }
        }

		public virtual bool? IsPropertyInventoryItemInTransitQuantityRemoved { get; set; }

        bool IMergePatchInventoryItemEntryMvo.IsPropertyInventoryItemInTransitQuantityRemoved
        {
            get
            {
                var b = this.IsPropertyInventoryItemInTransitQuantityRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyInventoryItemInTransitQuantityRemoved = value;
            }
        }

		public virtual bool? IsPropertyInventoryItemReservedQuantityRemoved { get; set; }

        bool IMergePatchInventoryItemEntryMvo.IsPropertyInventoryItemReservedQuantityRemoved
        {
            get
            {
                var b = this.IsPropertyInventoryItemReservedQuantityRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyInventoryItemReservedQuantityRemoved = value;
            }
        }

		public virtual bool? IsPropertyInventoryItemOccupiedQuantityRemoved { get; set; }

        bool IMergePatchInventoryItemEntryMvo.IsPropertyInventoryItemOccupiedQuantityRemoved
        {
            get
            {
                var b = this.IsPropertyInventoryItemOccupiedQuantityRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyInventoryItemOccupiedQuantityRemoved = value;
            }
        }

		public virtual bool? IsPropertyInventoryItemVirtualQuantityRemoved { get; set; }

        bool IMergePatchInventoryItemEntryMvo.IsPropertyInventoryItemVirtualQuantityRemoved
        {
            get
            {
                var b = this.IsPropertyInventoryItemVirtualQuantityRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyInventoryItemVirtualQuantityRemoved = value;
            }
        }

		public virtual bool? IsPropertyInventoryItemCreatedByRemoved { get; set; }

        bool IMergePatchInventoryItemEntryMvo.IsPropertyInventoryItemCreatedByRemoved
        {
            get
            {
                var b = this.IsPropertyInventoryItemCreatedByRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyInventoryItemCreatedByRemoved = value;
            }
        }

		public virtual bool? IsPropertyInventoryItemCreatedAtRemoved { get; set; }

        bool IMergePatchInventoryItemEntryMvo.IsPropertyInventoryItemCreatedAtRemoved
        {
            get
            {
                var b = this.IsPropertyInventoryItemCreatedAtRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyInventoryItemCreatedAtRemoved = value;
            }
        }

		public virtual bool? IsPropertyInventoryItemUpdatedByRemoved { get; set; }

        bool IMergePatchInventoryItemEntryMvo.IsPropertyInventoryItemUpdatedByRemoved
        {
            get
            {
                var b = this.IsPropertyInventoryItemUpdatedByRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyInventoryItemUpdatedByRemoved = value;
            }
        }

		public virtual bool? IsPropertyInventoryItemUpdatedAtRemoved { get; set; }

        bool IMergePatchInventoryItemEntryMvo.IsPropertyInventoryItemUpdatedAtRemoved
        {
            get
            {
                var b = this.IsPropertyInventoryItemUpdatedAtRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyInventoryItemUpdatedAtRemoved = value;
            }
        }


        string ICommandDto.CommandType 
        {
            get { return this.GetCommandType(); }
        }

        protected abstract string GetCommandType();

	}


    public class CreateOrMergePatchOrDeleteInventoryItemEntryMvoDto : InventoryItemEntryMvoCommandDtoBase
    {
        private string _commandType;

        public virtual string CommandType
        {
            get { return _commandType; }
            set { _commandType = value; }
        }

        protected override string GetCommandType()
        {
            return this._commandType;
        }

    }



	public class CreateInventoryItemEntryMvoDto : CreateOrMergePatchOrDeleteInventoryItemEntryMvoDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Create;
        }

	}


	public class MergePatchInventoryItemEntryMvoDto : CreateOrMergePatchOrDeleteInventoryItemEntryMvoDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.MergePatch;
        }

	}

	public class DeleteInventoryItemEntryMvoDto : CreateOrMergePatchOrDeleteInventoryItemEntryMvoDto
	{
        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Delete;
        }


        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

	}

    public static partial class InventoryItemEntryMvoCommandDtos
    {

    }

}

