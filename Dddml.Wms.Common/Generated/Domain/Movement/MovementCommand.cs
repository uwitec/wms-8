// <autogenerated>
//   This file was generated by T4 code generator GenerateMovementDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Movement;

namespace Dddml.Wms.Domain.Movement
{

	public abstract class MovementCommandBase : IMovementCommand
	{
		public virtual string DocumentNumber { get; set; }


		string IAggregateCommand<string, long>.AggregateId
		{
			get
			{
				return this.DocumentNumber;
			}
		}


		long IAggregateCommand<string, long>.AggregateVersion
		{
			get
			{
				return this.Version;
			}
		}

		public virtual long Version { get; set; }

		public virtual string RequesterId { get; set; }

		public virtual string CommandId { get; set; }

        object ICommand.RequesterId
        {
            get { return this.RequesterId; }
            set { this.RequesterId = (string)value; }
        }

        string ICommand.CommandId
        {
            get { return this.CommandId; }
            set { this.CommandId = value; }
        }

		public virtual DateTime? MovementDate { get; set; }

		public virtual bool? Posted { get; set; }

		public virtual bool? Processed { get; set; }

		public virtual string Processing { get; set; }

		public virtual DateTime? DateReceived { get; set; }

		public virtual string DocumentTypeId { get; set; }

		public virtual bool? IsInTransit { get; set; }

		public virtual bool? IsApproved { get; set; }

		public virtual decimal? ApprovalAmount { get; set; }

		public virtual string ShipperId { get; set; }

		public virtual string SalesRepresentativeId { get; set; }

		public virtual string BusinessPartnerId { get; set; }

		public virtual decimal? ChargeAmount { get; set; }

		public virtual string CreateFrom { get; set; }

		public virtual decimal? FreightAmount { get; set; }

		public virtual string ReversalDocumentNumber { get; set; }

		public virtual string WarehouseIdFrom { get; set; }

		public virtual string WarehouseIdTo { get; set; }

		public virtual string Description { get; set; }

		public virtual bool? Active { get; set; }


		// //////////////////////////////////////////////////

        string ICommandDto.CommandType 
        {
            get { return this.GetCommandType(); }
        }

        protected abstract string GetCommandType();


	}


	public class CreateMovement : MovementCommandBase, ICreateMovement
	{
		
		public CreateMovement ()
		{
		}


        private CreateMovementLineCommands _movementLines = new CreateMovementLineCommands();

        public ICreateMovementLineCommands MovementLines
        {
            get
            {
                return this._movementLines;
            }
        }

        public CreateMovementLine NewCreateMovementLine()
        {
            var c = new CreateMovementLine();
            c.MovementDocumentNumber = this.DocumentNumber;

            return c;
        }

        ICreateMovementLine ICreateMovement.NewCreateMovementLine()
        {
            return this.NewCreateMovementLine();
        }



        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Create;
        }
	}


	public class MergePatchMovement :MovementCommandBase, IMergePatchMovement
	{

		public virtual bool IsPropertyMovementDateRemoved { get; set; }

		public virtual bool IsPropertyPostedRemoved { get; set; }

		public virtual bool IsPropertyProcessedRemoved { get; set; }

		public virtual bool IsPropertyProcessingRemoved { get; set; }

		public virtual bool IsPropertyDateReceivedRemoved { get; set; }

		public virtual bool IsPropertyDocumentTypeIdRemoved { get; set; }

		public virtual bool IsPropertyIsInTransitRemoved { get; set; }

		public virtual bool IsPropertyIsApprovedRemoved { get; set; }

		public virtual bool IsPropertyApprovalAmountRemoved { get; set; }

		public virtual bool IsPropertyShipperIdRemoved { get; set; }

		public virtual bool IsPropertySalesRepresentativeIdRemoved { get; set; }

		public virtual bool IsPropertyBusinessPartnerIdRemoved { get; set; }

		public virtual bool IsPropertyChargeAmountRemoved { get; set; }

		public virtual bool IsPropertyCreateFromRemoved { get; set; }

		public virtual bool IsPropertyFreightAmountRemoved { get; set; }

		public virtual bool IsPropertyReversalDocumentNumberRemoved { get; set; }

		public virtual bool IsPropertyWarehouseIdFromRemoved { get; set; }

		public virtual bool IsPropertyWarehouseIdToRemoved { get; set; }

		public virtual bool IsPropertyDescriptionRemoved { get; set; }

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public MergePatchMovement ()
		{
		}

        private MovementLineCommands _movementLineCommands = new MovementLineCommands();

        public IMovementLineCommands MovementLineCommands
        {
            get
            {
                return this._movementLineCommands;
            }
        }


        public CreateMovementLine NewCreateMovementLine()
        {
            var c = new CreateMovementLine();
            c.MovementDocumentNumber = this.DocumentNumber;

            return c;
        }

        ICreateMovementLine IMergePatchMovement.NewCreateMovementLine()
        {
            return this.NewCreateMovementLine();
        }

        public MergePatchMovementLine NewMergePatchMovementLine()
        {
            var c = new MergePatchMovementLine();
            c.MovementDocumentNumber = this.DocumentNumber;

            return c;
        }

        IMergePatchMovementLine IMergePatchMovement.NewMergePatchMovementLine()
        {
            return this.NewMergePatchMovementLine();
        }


        public RemoveMovementLine NewRemoveMovementLine()
        {
            var c = new RemoveMovementLine();
            c.MovementDocumentNumber = this.DocumentNumber;

            return c;
        }

        IRemoveMovementLine IMergePatchMovement.NewRemoveMovementLine()
        {
            return this.NewRemoveMovementLine();
        }


        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.MergePatch;
        }

	}

	public class DeleteMovement : MovementCommandBase, IDeleteMovement
	{
		public DeleteMovement ()
		{
		}

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Delete;
        }

	}


    public class CreateMovementLineCommands : ICreateMovementLineCommands
    {
        private List<ICreateMovementLine> _innerCommands = new List<ICreateMovementLine>();

        public void Add(ICreateMovementLine c)
        {
            _innerCommands.Add(c);
        }

        public void Remove(ICreateMovementLine c)
        {
            _innerCommands.Remove(c);
        }

        public void Clear()
        {
            _innerCommands.Clear();
        }

        public IEnumerator<ICreateMovementLine> GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

    }

    public class MovementLineCommands : IMovementLineCommands
    {
        private List<IMovementLineCommand> _innerCommands = new List<IMovementLineCommand>();

        public void Add(IMovementLineCommand c)
        {
            _innerCommands.Add(c);
        }

        public void Remove(IMovementLineCommand c)
        {
            _innerCommands.Remove(c);
        }

        public void Clear()
        {
            _innerCommands.Clear();
        }

        public IEnumerator<IMovementLineCommand> GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerCommands.GetEnumerator();
        }

    }

    public static partial class MovementCommands
    {
        public class AddLine : IMovementCommand
        {

            public string CommandType
            {
                get { return "AddLine"; }
            }

            public string LineNumber { get; set; }

            public string ProductId { get; set; }

            public string LocatorIdFrom { get; set; }

            public string LocatorIdTo { get; set; }

            public IDictionary<string, object> AttributeSetInstance { get; set; }

            public string Description { get; set; }

            public string QuantityUomId { get; set; }

            public decimal MovementQuantity { get; set; }

            public string DocumentNumber { get; set; }

            public long Version { get; set; }

            public string CommandId { get; set; }

            public string RequesterId { get; set; }


            string ICommand.CommandId
            {
                get
                {
                    return this.CommandId;
                }
                set
                {
                    this.CommandId = value;
                }
            }

            object ICommand.RequesterId
            {
                get { return this.RequesterId; }
                set { this.RequesterId = (string)value; }
            }

            string ICommandDto.CommandType
            {
                get { return this.CommandType; }
            }

            string IAggregateCommand<string, long>.AggregateId
            {
                get { return this.DocumentNumber; }
            }

            string IMovementCommand.DocumentNumber
            {
                get { return this.DocumentNumber; }
                set { this.DocumentNumber = value; }
            }

            long IAggregateCommand<string, long>.AggregateVersion
            {
                get { return this.Version; }
            }

            long IMovementCommand.Version
            {
                get
                {
                    return this.Version;
                }
                set
                {
                    this.Version = value;
                }
            }

        }

        public class DocumentAction : IMovementCommand
        {

            public string CommandType
            {
                get { return "DocumentAction"; }
            }

            public string Value { get; set; }

            public string DocumentNumber { get; set; }

            public long Version { get; set; }

            public string CommandId { get; set; }

            public string RequesterId { get; set; }


            string ICommand.CommandId
            {
                get
                {
                    return this.CommandId;
                }
                set
                {
                    this.CommandId = value;
                }
            }

            object ICommand.RequesterId
            {
                get { return this.RequesterId; }
                set { this.RequesterId = (string)value; }
            }

            string ICommandDto.CommandType
            {
                get { return this.CommandType; }
            }

            string IAggregateCommand<string, long>.AggregateId
            {
                get { return this.DocumentNumber; }
            }

            string IMovementCommand.DocumentNumber
            {
                get { return this.DocumentNumber; }
                set { this.DocumentNumber = value; }
            }

            long IAggregateCommand<string, long>.AggregateVersion
            {
                get { return this.Version; }
            }

            long IMovementCommand.Version
            {
                get
                {
                    return this.Version;
                }
                set
                {
                    this.Version = value;
                }
            }

        }

    }

}
