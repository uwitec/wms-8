// <autogenerated>
//   This file was generated by T4 code generator GenerateMovementDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Movement;
using Dddml.Support.Criterion;

namespace Dddml.Wms.Domain.Movement
{

	public partial interface IMovementApplicationService : IApplicationService
	{
		void When(ICreateMovement c);

		void When(IMergePatchMovement c);

		void When(IDeleteMovement c);

		void When(MovementCommands.AddLine c);

		void When(MovementCommands.DocumentAction c);

 		IMovementState Get(string documentNumber);

        IEnumerable<IMovementState> GetAll(int firstResult, int maxResults);

        IEnumerable<IMovementState> Get(IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue);

        IEnumerable<IMovementState> Get(ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue);

        IEnumerable<IMovementState> GetByProperty(string propertyName, object propertyValue, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue);

        long GetCount(IEnumerable<KeyValuePair<string, object>> filter);

        long GetCount(ICriterion filter);

        IMovementEvent GetEvent(string documentNumber, long version);

        IMovementState GetHistoryState(string documentNumber, long version);

        IMovementLineState GetMovementLine(string movementDocumentNumber, string lineNumber);

        IEnumerable<IMovementLineState> GetMovementLines(string movementDocumentNumber);


	}

    public static partial class MovementApplicationServiceExtension
    {
        public static IEnumerable<IMovementState> GetByProperty(this IMovementApplicationService applicationService,
            System.Linq.Expressions.Expression<Func<IMovementState, object>> propertySelector, 
            object propertyValue, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            return applicationService.GetByProperty(ReflectUtils.GetPropertyName<IMovementState>(propertySelector), propertyValue, orders, firstResult, maxResults);
        }

        public static IEnumerable<IMovementState> GetByProperty<TPropertyType>(this IMovementApplicationService applicationService,
            System.Linq.Expressions.Expression<Func<IMovementState, TPropertyType>> propertySelector,
            TPropertyType propertyValue, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            return applicationService.GetByProperty(ReflectUtils.GetPropertyName<IMovementState, TPropertyType>(propertySelector), propertyValue, orders, firstResult, maxResults);
        }
    }

}

