// <autogenerated>
//   This file was generated by T4 code generator GenerateMovementDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Movement;

namespace Dddml.Wms.Domain.Movement
{

	public abstract class MovementCommandDtoBase : ICommandDto, ICreateMovement, IMergePatchMovement, IDeleteMovement
	{

		string IAggregateCommand<string, long>.AggregateId
		{
			get
			{
				return ((ICreateOrMergePatchOrDeleteMovement)this).DocumentNumber;
			}
		}


		long IAggregateCommand<string, long>.AggregateVersion
		{
			get
			{
				return this.Version != null ? this.Version.Value : default(long);
			}
		}

        long IMovementCommand.Version
        {
            get { return this.Version != null ? this.Version.Value : default(long); }
            set { this.Version = value; }
        }

		public virtual long? Version { get; set; }

		public virtual string RequesterId { get; set; }

		public virtual string CommandId { get; set; }

        object ICommand.RequesterId
        {
            get { return this.RequesterId; }
            set { this.RequesterId = (string)value; }
        }

        string ICommand.CommandId
        {
            get { return this.CommandId; }
            set { this.CommandId = value; }
        }

		public virtual string DocumentNumber { get; set; }

		public virtual DateTime? MovementDate { get; set; }

		public virtual bool? Posted { get; set; }

		public virtual bool? Processed { get; set; }

		public virtual string Processing { get; set; }

		public virtual DateTime? DateReceived { get; set; }

		public virtual string DocumentTypeId { get; set; }

		public virtual bool? IsInTransit { get; set; }

		public virtual bool? IsApproved { get; set; }

		public virtual decimal? ApprovalAmount { get; set; }

		public virtual string ShipperId { get; set; }

		public virtual string SalesRepresentativeId { get; set; }

		public virtual string BusinessPartnerId { get; set; }

		public virtual decimal? ChargeAmount { get; set; }

		public virtual string CreateFrom { get; set; }

		public virtual decimal? FreightAmount { get; set; }

		public virtual string ReversalDocumentNumber { get; set; }

		public virtual string WarehouseIdFrom { get; set; }

		public virtual string WarehouseIdTo { get; set; }

		public virtual string Description { get; set; }

		public virtual bool? Active { get; set; }

		public virtual bool? IsPropertyMovementDateRemoved { get; set; }

        bool IMergePatchMovement.IsPropertyMovementDateRemoved
        {
            get
            {
                var b = this.IsPropertyMovementDateRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyMovementDateRemoved = value;
            }
        }

		public virtual bool? IsPropertyPostedRemoved { get; set; }

        bool IMergePatchMovement.IsPropertyPostedRemoved
        {
            get
            {
                var b = this.IsPropertyPostedRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyPostedRemoved = value;
            }
        }

		public virtual bool? IsPropertyProcessedRemoved { get; set; }

        bool IMergePatchMovement.IsPropertyProcessedRemoved
        {
            get
            {
                var b = this.IsPropertyProcessedRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyProcessedRemoved = value;
            }
        }

		public virtual bool? IsPropertyProcessingRemoved { get; set; }

        bool IMergePatchMovement.IsPropertyProcessingRemoved
        {
            get
            {
                var b = this.IsPropertyProcessingRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyProcessingRemoved = value;
            }
        }

		public virtual bool? IsPropertyDateReceivedRemoved { get; set; }

        bool IMergePatchMovement.IsPropertyDateReceivedRemoved
        {
            get
            {
                var b = this.IsPropertyDateReceivedRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyDateReceivedRemoved = value;
            }
        }

		public virtual bool? IsPropertyDocumentTypeIdRemoved { get; set; }

        bool IMergePatchMovement.IsPropertyDocumentTypeIdRemoved
        {
            get
            {
                var b = this.IsPropertyDocumentTypeIdRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyDocumentTypeIdRemoved = value;
            }
        }

		public virtual bool? IsPropertyIsInTransitRemoved { get; set; }

        bool IMergePatchMovement.IsPropertyIsInTransitRemoved
        {
            get
            {
                var b = this.IsPropertyIsInTransitRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyIsInTransitRemoved = value;
            }
        }

		public virtual bool? IsPropertyIsApprovedRemoved { get; set; }

        bool IMergePatchMovement.IsPropertyIsApprovedRemoved
        {
            get
            {
                var b = this.IsPropertyIsApprovedRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyIsApprovedRemoved = value;
            }
        }

		public virtual bool? IsPropertyApprovalAmountRemoved { get; set; }

        bool IMergePatchMovement.IsPropertyApprovalAmountRemoved
        {
            get
            {
                var b = this.IsPropertyApprovalAmountRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyApprovalAmountRemoved = value;
            }
        }

		public virtual bool? IsPropertyShipperIdRemoved { get; set; }

        bool IMergePatchMovement.IsPropertyShipperIdRemoved
        {
            get
            {
                var b = this.IsPropertyShipperIdRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyShipperIdRemoved = value;
            }
        }

		public virtual bool? IsPropertySalesRepresentativeIdRemoved { get; set; }

        bool IMergePatchMovement.IsPropertySalesRepresentativeIdRemoved
        {
            get
            {
                var b = this.IsPropertySalesRepresentativeIdRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertySalesRepresentativeIdRemoved = value;
            }
        }

		public virtual bool? IsPropertyBusinessPartnerIdRemoved { get; set; }

        bool IMergePatchMovement.IsPropertyBusinessPartnerIdRemoved
        {
            get
            {
                var b = this.IsPropertyBusinessPartnerIdRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyBusinessPartnerIdRemoved = value;
            }
        }

		public virtual bool? IsPropertyChargeAmountRemoved { get; set; }

        bool IMergePatchMovement.IsPropertyChargeAmountRemoved
        {
            get
            {
                var b = this.IsPropertyChargeAmountRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyChargeAmountRemoved = value;
            }
        }

		public virtual bool? IsPropertyCreateFromRemoved { get; set; }

        bool IMergePatchMovement.IsPropertyCreateFromRemoved
        {
            get
            {
                var b = this.IsPropertyCreateFromRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyCreateFromRemoved = value;
            }
        }

		public virtual bool? IsPropertyFreightAmountRemoved { get; set; }

        bool IMergePatchMovement.IsPropertyFreightAmountRemoved
        {
            get
            {
                var b = this.IsPropertyFreightAmountRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyFreightAmountRemoved = value;
            }
        }

		public virtual bool? IsPropertyReversalDocumentNumberRemoved { get; set; }

        bool IMergePatchMovement.IsPropertyReversalDocumentNumberRemoved
        {
            get
            {
                var b = this.IsPropertyReversalDocumentNumberRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyReversalDocumentNumberRemoved = value;
            }
        }

		public virtual bool? IsPropertyWarehouseIdFromRemoved { get; set; }

        bool IMergePatchMovement.IsPropertyWarehouseIdFromRemoved
        {
            get
            {
                var b = this.IsPropertyWarehouseIdFromRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyWarehouseIdFromRemoved = value;
            }
        }

		public virtual bool? IsPropertyWarehouseIdToRemoved { get; set; }

        bool IMergePatchMovement.IsPropertyWarehouseIdToRemoved
        {
            get
            {
                var b = this.IsPropertyWarehouseIdToRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyWarehouseIdToRemoved = value;
            }
        }

		public virtual bool? IsPropertyDescriptionRemoved { get; set; }

        bool IMergePatchMovement.IsPropertyDescriptionRemoved
        {
            get
            {
                var b = this.IsPropertyDescriptionRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyDescriptionRemoved = value;
            }
        }

		public virtual bool? IsPropertyActiveRemoved { get; set; }

        bool IMergePatchMovement.IsPropertyActiveRemoved
        {
            get
            {
                var b = this.IsPropertyActiveRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyActiveRemoved = value;
            }
        }

        ICreateMovementLineCommands ICreateMovement.MovementLines
        {
            get
            {
                return this._movementLines;
            }
        }

        IMovementLineCommands IMergePatchMovement.MovementLineCommands
        {
            get
            {
                return this._movementLines;
            }
        }

        public virtual CreateMovementLineDto NewCreateMovementLine()
        {
            var c = new CreateMovementLineDto();
            c.MovementDocumentNumber = this.DocumentNumber;

            return c;
        }

        ICreateMovementLine ICreateMovement.NewCreateMovementLine()
        {
            return this.NewCreateMovementLine();
        }

        ICreateMovementLine IMergePatchMovement.NewCreateMovementLine()
        {
            return this.NewCreateMovementLine();
        }

        public virtual MergePatchMovementLineDto NewMergePatchMovementLine()
        {
            var c = new MergePatchMovementLineDto();
            c.MovementDocumentNumber = this.DocumentNumber;

            return c;
        }

        IMergePatchMovementLine IMergePatchMovement.NewMergePatchMovementLine()
        {
            return this.NewMergePatchMovementLine();
        }

        public virtual RemoveMovementLineDto NewRemoveMovementLine()
        {
            var c = new RemoveMovementLineDto();
            c.MovementDocumentNumber = this.DocumentNumber;

            return c;
        }

        IRemoveMovementLine IMergePatchMovement.NewRemoveMovementLine()
        {
            return this.NewRemoveMovementLine();
        }

        private CreateOrMergePatchOrRemoveMovementLineDtos _movementLines = new CreateOrMergePatchOrRemoveMovementLineDtos();

        public virtual CreateOrMergePatchOrRemoveMovementLineDto[] MovementLines
        {
            get
            {
                return _movementLines.ToArray();
            }
            set
            {
                _movementLines.Clear();
                _movementLines.AddRange(value);
            }
        }


        string ICommandDto.CommandType 
        {
            get { return this.GetCommandType(); }
        }

        protected abstract string GetCommandType();

	}


    public class CreateOrMergePatchOrDeleteMovementDto : MovementCommandDtoBase
    {
        private string _commandType;

        public virtual string CommandType
        {
            get { return _commandType; }
            set { _commandType = value; }
        }

        protected override string GetCommandType()
        {
            return this._commandType;
        }

    }



	public class CreateMovementDto : CreateOrMergePatchOrDeleteMovementDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Create;
        }

	}


	public class MergePatchMovementDto : CreateOrMergePatchOrDeleteMovementDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.MergePatch;
        }

	}

	public class DeleteMovementDto : CreateOrMergePatchOrDeleteMovementDto
	{
        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Delete;
        }


        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

	}

    public static partial class MovementCommandDtos
    {

        public class DocumentActionRequestContent : ICommandDto
        {

            public string CommandType
            {
                get { return "DocumentAction"; }
            }

            public string Value { get; set; }

            public string DocumentNumber { get; set; }

            public long Version { get; set; }

            public string CommandId { get; set; }

            public string RequesterId { get; set; }

            public MovementCommands.DocumentAction ToDocumentAction()
            {
                var cmd = new MovementCommands.DocumentAction();
                cmd.Value = this.Value;
                cmd.DocumentNumber = this.DocumentNumber;
                cmd.Version = this.Version;
                cmd.CommandId = this.CommandId;
                cmd.RequesterId = this.RequesterId;
                return cmd;
            }

        }

    }

}

