// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Shipment;

namespace Dddml.Wms.Domain.Shipment
{

    public class ShipmentReceiptImageStates : IShipmentReceiptImageStates
    {
        
		protected IShipmentReceiptImageStateDao ShipmentReceiptImageStateDao
		{
			get
			{
				return ApplicationContext.Current["ShipmentReceiptImageStateDao"] as IShipmentReceiptImageStateDao;
			}
		}

		private Dictionary<ShipmentReceiptImageId, IShipmentReceiptImageState> _loadedShipmentReceiptImageStates = new Dictionary<ShipmentReceiptImageId, IShipmentReceiptImageState>();

		private Dictionary<ShipmentReceiptImageId, IShipmentReceiptImageState> _removedShipmentReceiptImageStates = new Dictionary<ShipmentReceiptImageId, IShipmentReceiptImageState>();

		protected virtual IEnumerable<IShipmentReceiptImageState> LoadedShipmentReceiptImageStates {
			get {
				return this._loadedShipmentReceiptImageStates.Values;
			}
		}

        private IShipmentReceiptState _shipmentReceiptState;

        private IEnumerable<IShipmentReceiptImageState> InnerEnumeralbe
        {
            get
            {
                if (!ForReapplying)
                {
                    return ShipmentReceiptImageStateDao.FindByShipmentIdAndShipmentReceiptReceiptSeqId((_shipmentReceiptState as IGlobalIdentity<ShipmentReceiptId>).GlobalId.ShipmentId, (_shipmentReceiptState as IGlobalIdentity<ShipmentReceiptId>).GlobalId.ReceiptSeqId);
                }
                else
                {
                    return _loadedShipmentReceiptImageStates.Values.Where(s => !(_removedShipmentReceiptImageStates.ContainsKey(s.GlobalId) && s.Deleted));
                }
            }
        }

        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public ShipmentReceiptImageStates(IShipmentReceiptState outerState)
        {
            this._shipmentReceiptState = outerState;
            this._forReapplying = outerState.ForReapplying;
        }

        public IEnumerator<IShipmentReceiptImageState> GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        public virtual void Remove(IShipmentReceiptImageState state)
        {
            this._removedShipmentReceiptImageStates.Add(state.GlobalId, state);
        }

        public virtual IShipmentReceiptImageState Get(string sequenceId)
		{
			return Get(sequenceId, false, false);
		}

        public virtual IShipmentReceiptImageState Get(string sequenceId, bool forCreation)
        {
			return Get(sequenceId, forCreation, false);
        }

        public virtual IShipmentReceiptImageState Get(string sequenceId, bool forCreation, bool nullAllowed)
        {
            ShipmentReceiptImageId globalId = new ShipmentReceiptImageId((_shipmentReceiptState as IGlobalIdentity<ShipmentReceiptId>).GlobalId.ShipmentId, (_shipmentReceiptState as IGlobalIdentity<ShipmentReceiptId>).GlobalId.ReceiptSeqId, sequenceId);
            if (_loadedShipmentReceiptImageStates.ContainsKey(globalId)) {
                var state = _loadedShipmentReceiptImageStates[globalId];
                if (this._shipmentReceiptState != null && this._shipmentReceiptState.ReadOnly == false) { ((IShipmentReceiptImageState)state).ReadOnly = false; }
                return state;
            }
            if (forCreation || ForReapplying)
            {
                var state = new ShipmentReceiptImageState(ForReapplying);
                state.ShipmentReceiptImageId = globalId;
                _loadedShipmentReceiptImageStates.Add(globalId, state);
                if (this._shipmentReceiptState != null && this._shipmentReceiptState.ReadOnly == false) { ((IShipmentReceiptImageState)state).ReadOnly = false; }
                return state;
            }
            else
            {
                var state = ShipmentReceiptImageStateDao.Get(globalId, nullAllowed);
                if (state != null)
                {
                    _loadedShipmentReceiptImageStates.Add(globalId, state);
                }
                if (this._shipmentReceiptState != null && this._shipmentReceiptState.ReadOnly == false) { ((IShipmentReceiptImageState)state).ReadOnly = false; }
                return state;
            }
        }

        public virtual void AddToSave(IShipmentReceiptImageState state)
        {
            this._loadedShipmentReceiptImageStates[state.GlobalId] = state;
        }

		#region Saveable Implements

		public virtual void Save ()
		{
			foreach (IShipmentReceiptImageState s in this.LoadedShipmentReceiptImageStates) {
                ShipmentReceiptImageStateDao.Save(s);
			}
            foreach(IShipmentReceiptImageState s in this._removedShipmentReceiptImageStates.Values)
            {
                ShipmentReceiptImageStateDao.Delete(s);
            }
		}

		#endregion


    }



}


