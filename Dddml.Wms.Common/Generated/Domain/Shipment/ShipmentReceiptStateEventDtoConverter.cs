// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Shipment;

namespace Dddml.Wms.Domain.Shipment
{

    public class ShipmentReceiptStateEventDtoConverter
    {
        public virtual ShipmentReceiptStateCreatedOrMergePatchedOrRemovedDto ToShipmentReceiptStateEventDto(IShipmentReceiptEvent stateEvent)
        {
            if (stateEvent.EventType == StateEventType.Created)
            {
                var e = (IShipmentReceiptStateCreated)stateEvent;
                return ToShipmentReceiptStateCreatedDto(e);
            }
            else if (stateEvent.EventType == StateEventType.MergePatched)
            {
                var e = (IShipmentReceiptStateMergePatched)stateEvent;
                return ToShipmentReceiptStateMergePatchedDto(e);
            }
            throw DomainError.Named("invalidEventType", String.Format("Invalid state event type: {0}", stateEvent.EventType));
        }

        public virtual ShipmentReceiptStateCreatedDto ToShipmentReceiptStateCreatedDto(IShipmentReceiptStateCreated e)
        {
            var dto = new ShipmentReceiptStateCreatedDto();
            dto.ShipmentReceiptEventId = e.ShipmentReceiptEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;
            dto.ProductId = e.ProductId;
            dto.AttributeSetInstanceId = e.AttributeSetInstanceId;
            dto.LocatorId = e.LocatorId;
            dto.ShipmentItemSeqId = e.ShipmentItemSeqId;
            dto.ShipmentPackageSeqId = e.ShipmentPackageSeqId;
            dto.OrderId = e.OrderId;
            dto.OrderItemSeqId = e.OrderItemSeqId;
            dto.ReturnId = e.ReturnId;
            dto.ReturnItemSeqId = e.ReturnItemSeqId;
            dto.RejectionReasonId = e.RejectionReasonId;
            dto.DamageReasonId = e.DamageReasonId;
            dto.ReceivedBy = e.ReceivedBy;
            dto.DatetimeReceived = e.DatetimeReceived;
            dto.ItemDescription = e.ItemDescription;
            dto.AcceptedQuantity = e.AcceptedQuantity;
            dto.RejectedQuantity = e.RejectedQuantity;
            dto.DamagedQuantity = e.DamagedQuantity;
            dto.Active = e.Active;
            dto.DamageStatusIds = e.DamageStatusIds.ToArray();
            var shipmentReceiptImageEvents = new List<ShipmentReceiptImageStateCreatedDto>();
            foreach (var ee in e.ShipmentReceiptImageEvents)
            {
                ShipmentReceiptImageStateCreatedDto eeDto = ShipmentReceiptImageStateEventDtoConverter.ToShipmentReceiptImageStateCreatedDto(ee);
                shipmentReceiptImageEvents.Add(eeDto);
            }
            dto.ShipmentReceiptImageEvents = shipmentReceiptImageEvents.ToArray();

            return dto;
        }

        public virtual ShipmentReceiptStateMergePatchedDto ToShipmentReceiptStateMergePatchedDto(IShipmentReceiptStateMergePatched e)
        {
            var dto = new ShipmentReceiptStateMergePatchedDto();
            dto.ShipmentReceiptEventId = e.ShipmentReceiptEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.Version = e.Version;
            dto.CommandId = e.CommandId;
            dto.ProductId = e.ProductId;
            dto.AttributeSetInstanceId = e.AttributeSetInstanceId;
            dto.LocatorId = e.LocatorId;
            dto.ShipmentItemSeqId = e.ShipmentItemSeqId;
            dto.ShipmentPackageSeqId = e.ShipmentPackageSeqId;
            dto.OrderId = e.OrderId;
            dto.OrderItemSeqId = e.OrderItemSeqId;
            dto.ReturnId = e.ReturnId;
            dto.ReturnItemSeqId = e.ReturnItemSeqId;
            dto.RejectionReasonId = e.RejectionReasonId;
            dto.DamageReasonId = e.DamageReasonId;
            dto.ReceivedBy = e.ReceivedBy;
            dto.DatetimeReceived = e.DatetimeReceived;
            dto.ItemDescription = e.ItemDescription;
            dto.AcceptedQuantity = e.AcceptedQuantity;
            dto.RejectedQuantity = e.RejectedQuantity;
            dto.DamagedQuantity = e.DamagedQuantity;
            dto.Active = e.Active;
            dto.DamageStatusIds = e.DamageStatusIds.ToArray();
            dto.IsPropertyProductIdRemoved = e.IsPropertyProductIdRemoved;
            dto.IsPropertyAttributeSetInstanceIdRemoved = e.IsPropertyAttributeSetInstanceIdRemoved;
            dto.IsPropertyLocatorIdRemoved = e.IsPropertyLocatorIdRemoved;
            dto.IsPropertyShipmentItemSeqIdRemoved = e.IsPropertyShipmentItemSeqIdRemoved;
            dto.IsPropertyShipmentPackageSeqIdRemoved = e.IsPropertyShipmentPackageSeqIdRemoved;
            dto.IsPropertyOrderIdRemoved = e.IsPropertyOrderIdRemoved;
            dto.IsPropertyOrderItemSeqIdRemoved = e.IsPropertyOrderItemSeqIdRemoved;
            dto.IsPropertyReturnIdRemoved = e.IsPropertyReturnIdRemoved;
            dto.IsPropertyReturnItemSeqIdRemoved = e.IsPropertyReturnItemSeqIdRemoved;
            dto.IsPropertyRejectionReasonIdRemoved = e.IsPropertyRejectionReasonIdRemoved;
            dto.IsPropertyDamageStatusIdsRemoved = e.IsPropertyDamageStatusIdsRemoved;
            dto.IsPropertyDamageReasonIdRemoved = e.IsPropertyDamageReasonIdRemoved;
            dto.IsPropertyReceivedByRemoved = e.IsPropertyReceivedByRemoved;
            dto.IsPropertyDatetimeReceivedRemoved = e.IsPropertyDatetimeReceivedRemoved;
            dto.IsPropertyItemDescriptionRemoved = e.IsPropertyItemDescriptionRemoved;
            dto.IsPropertyAcceptedQuantityRemoved = e.IsPropertyAcceptedQuantityRemoved;
            dto.IsPropertyRejectedQuantityRemoved = e.IsPropertyRejectedQuantityRemoved;
            dto.IsPropertyDamagedQuantityRemoved = e.IsPropertyDamagedQuantityRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;
            var shipmentReceiptImageEvents = new List<ShipmentReceiptImageStateCreatedOrMergePatchedOrRemovedDto>();
            foreach (var ee in e.ShipmentReceiptImageEvents)
            {
                ShipmentReceiptImageStateCreatedOrMergePatchedOrRemovedDto eeDto = ShipmentReceiptImageStateEventDtoConverter.ToShipmentReceiptImageStateEventDto(ee);
                shipmentReceiptImageEvents.Add(eeDto);
            }
            dto.ShipmentReceiptImageEvents = shipmentReceiptImageEvents.ToArray();


            return dto;
        }


        protected virtual ShipmentReceiptImageStateEventDtoConverter ShipmentReceiptImageStateEventDtoConverter
        {
            get
            {
                return new ShipmentReceiptImageStateEventDtoConverter();
            }
        }


    }


}

