// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Shipment;

namespace Dddml.Wms.Domain.Shipment
{

	public static partial class ShipmentReceiptStateInterfaceExtension
	{

        public static IShipmentReceiptCommand ToCreateOrMergePatchShipmentReceipt<TCreateShipmentReceipt, TMergePatchShipmentReceipt, TCreateShipmentReceiptImage, TMergePatchShipmentReceiptImage>(this IShipmentReceiptState state)
            where TCreateShipmentReceipt : ICreateShipmentReceipt, new()
            where TMergePatchShipmentReceipt : IMergePatchShipmentReceipt, new()
            where TCreateShipmentReceiptImage : ICreateShipmentReceiptImage, new()
            where TMergePatchShipmentReceiptImage : IMergePatchShipmentReceiptImage, new()
        {
            bool bUnsaved = ((IShipmentReceiptState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateShipmentReceipt<TCreateShipmentReceipt, TCreateShipmentReceiptImage>();
            }
            else 
            {
                return state.ToMergePatchShipmentReceipt<TMergePatchShipmentReceipt, TCreateShipmentReceiptImage, TMergePatchShipmentReceiptImage>();
            }
        }

        public static TRemoveShipmentReceipt ToRemoveShipmentReceipt<TRemoveShipmentReceipt>(this IShipmentReceiptState state)
            where TRemoveShipmentReceipt : IRemoveShipmentReceipt, new()
        {
            var cmd = new TRemoveShipmentReceipt();
            cmd.ReceiptSeqId = state.ReceiptSeqId;
            return cmd;
        }

        public static TMergePatchShipmentReceipt ToMergePatchShipmentReceipt<TMergePatchShipmentReceipt, TCreateShipmentReceiptImage, TMergePatchShipmentReceiptImage>(this IShipmentReceiptState state)
            where TMergePatchShipmentReceipt : IMergePatchShipmentReceipt, new()
            where TCreateShipmentReceiptImage : ICreateShipmentReceiptImage, new()
            where TMergePatchShipmentReceiptImage : IMergePatchShipmentReceiptImage, new()
        {
            var cmd = new TMergePatchShipmentReceipt();

            cmd.ReceiptSeqId = state.ReceiptSeqId;
            cmd.ProductId = state.ProductId;
            cmd.AttributeSetInstanceId = state.AttributeSetInstanceId;
            cmd.LocatorId = state.LocatorId;
            cmd.ShipmentItemSeqId = state.ShipmentItemSeqId;
            cmd.ShipmentPackageSeqId = state.ShipmentPackageSeqId;
            cmd.OrderId = state.OrderId;
            cmd.OrderItemSeqId = state.OrderItemSeqId;
            cmd.ReturnId = state.ReturnId;
            cmd.ReturnItemSeqId = state.ReturnItemSeqId;
            cmd.RejectionReasonId = state.RejectionReasonId;
            cmd.DamageReasonId = state.DamageReasonId;
            cmd.ReceivedBy = state.ReceivedBy;
            cmd.DatetimeReceived = state.DatetimeReceived;
            cmd.ItemDescription = state.ItemDescription;
            cmd.AcceptedQuantity = state.AcceptedQuantity;
            cmd.RejectedQuantity = state.RejectedQuantity;
            cmd.DamagedQuantity = state.DamagedQuantity;
            cmd.Active = ((IShipmentReceiptStateProperties)state).Active;
            cmd.ShipmentId = state.ShipmentId;
            
            if (state.ProductId == null) { cmd.IsPropertyProductIdRemoved = true; }
            if (state.AttributeSetInstanceId == null) { cmd.IsPropertyAttributeSetInstanceIdRemoved = true; }
            if (state.LocatorId == null) { cmd.IsPropertyLocatorIdRemoved = true; }
            if (state.ShipmentItemSeqId == null) { cmd.IsPropertyShipmentItemSeqIdRemoved = true; }
            if (state.ShipmentPackageSeqId == null) { cmd.IsPropertyShipmentPackageSeqIdRemoved = true; }
            if (state.OrderId == null) { cmd.IsPropertyOrderIdRemoved = true; }
            if (state.OrderItemSeqId == null) { cmd.IsPropertyOrderItemSeqIdRemoved = true; }
            if (state.ReturnId == null) { cmd.IsPropertyReturnIdRemoved = true; }
            if (state.ReturnItemSeqId == null) { cmd.IsPropertyReturnItemSeqIdRemoved = true; }
            if (state.RejectionReasonId == null) { cmd.IsPropertyRejectionReasonIdRemoved = true; }
            if (state.DamageReasonId == null) { cmd.IsPropertyDamageReasonIdRemoved = true; }
            if (state.ReceivedBy == null) { cmd.IsPropertyReceivedByRemoved = true; }
            if (state.DatetimeReceived == null) { cmd.IsPropertyDatetimeReceivedRemoved = true; }
            if (state.ItemDescription == null) { cmd.IsPropertyItemDescriptionRemoved = true; }
            if (state.AcceptedQuantity == null) { cmd.IsPropertyAcceptedQuantityRemoved = true; }
            if (state.RejectedQuantity == null) { cmd.IsPropertyRejectedQuantityRemoved = true; }
            if (state.DamagedQuantity == null) { cmd.IsPropertyDamagedQuantityRemoved = true; }
            foreach (var d in state.ShipmentReceiptImages)
            {
                var c = d.ToCreateOrMergePatchShipmentReceiptImage<TCreateShipmentReceiptImage, TMergePatchShipmentReceiptImage>();
                cmd.ShipmentReceiptImageCommands.Add(c);
            }
            return cmd;
        }

        public static TCreateShipmentReceipt ToCreateShipmentReceipt<TCreateShipmentReceipt, TCreateShipmentReceiptImage>(this IShipmentReceiptState state)
            where TCreateShipmentReceipt : ICreateShipmentReceipt, new()
            where TCreateShipmentReceiptImage : ICreateShipmentReceiptImage, new()
        {
            var cmd = new TCreateShipmentReceipt();

            cmd.ReceiptSeqId = state.ReceiptSeqId;
            cmd.ProductId = state.ProductId;
            cmd.AttributeSetInstanceId = state.AttributeSetInstanceId;
            cmd.LocatorId = state.LocatorId;
            cmd.ShipmentItemSeqId = state.ShipmentItemSeqId;
            cmd.ShipmentPackageSeqId = state.ShipmentPackageSeqId;
            cmd.OrderId = state.OrderId;
            cmd.OrderItemSeqId = state.OrderItemSeqId;
            cmd.ReturnId = state.ReturnId;
            cmd.ReturnItemSeqId = state.ReturnItemSeqId;
            cmd.RejectionReasonId = state.RejectionReasonId;
            cmd.DamageReasonId = state.DamageReasonId;
            cmd.ReceivedBy = state.ReceivedBy;
            cmd.DatetimeReceived = state.DatetimeReceived;
            cmd.ItemDescription = state.ItemDescription;
            cmd.AcceptedQuantity = state.AcceptedQuantity;
            cmd.RejectedQuantity = state.RejectedQuantity;
            cmd.DamagedQuantity = state.DamagedQuantity;
            cmd.Active = ((IShipmentReceiptStateProperties)state).Active;
            cmd.ShipmentId = state.ShipmentId;
            foreach (var d in state.ShipmentReceiptImages)
            {
                var c = d.ToCreateShipmentReceiptImage<TCreateShipmentReceiptImage>();
                cmd.ShipmentReceiptImages.Add(c);
            }
            return cmd;
        }
		

	}

}

