// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Shipment;

namespace Dddml.Wms.Domain.Shipment
{

	public abstract class ShipmentReceiptEventBase : IShipmentReceiptEvent
	{

		public virtual ShipmentReceiptEventId ShipmentReceiptEventId { get; set; }

        public virtual string ReceiptSeqId
        {
            get { return ShipmentReceiptEventId.ReceiptSeqId; }
            set { ShipmentReceiptEventId.ReceiptSeqId = value; }
        }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		ShipmentReceiptEventId IGlobalIdentity<ShipmentReceiptEventId>.GlobalId {
			get
			{
				return this.ShipmentReceiptEventId;
			}
		}

        public virtual bool EventReadOnly { get; set; }

        bool IShipmentReceiptEvent.ReadOnly
        {
            get
            {
                return this.EventReadOnly;
            }
            set
            {
                this.EventReadOnly = value;
            }
        }

		public virtual long Version { get; set; }


		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}

        protected ShipmentReceiptEventBase()
        {
        }

        protected ShipmentReceiptEventBase(ShipmentReceiptEventId stateEventId)
        {
            this.ShipmentReceiptEventId = stateEventId;
        }

		protected IShipmentReceiptImageEventDao ShipmentReceiptImageEventDao
		{
			get { return ApplicationContext.Current["ShipmentReceiptImageEventDao"] as IShipmentReceiptImageEventDao; }
		}

        protected ShipmentReceiptImageEventId NewShipmentReceiptImageEventId(string sequenceId)
        {
            var stateEventId = new ShipmentReceiptImageEventId(this.ShipmentReceiptEventId.ShipmentId, this.ShipmentReceiptEventId.ReceiptSeqId, sequenceId, this.ShipmentReceiptEventId.ShipmentVersion);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IShipmentReceiptImageEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IShipmentReceiptEvent oe, IShipmentReceiptImageEvent e)
		{
			if (!oe.ShipmentReceiptEventId.ShipmentId.Equals(e.ShipmentReceiptImageEventId.ShipmentId))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id ShipmentId {0} but inner id ShipmentId {1}", 
					oe.ShipmentReceiptEventId.ShipmentId, e.ShipmentReceiptImageEventId.ShipmentId);
			}
			if (!oe.ShipmentReceiptEventId.ReceiptSeqId.Equals(e.ShipmentReceiptImageEventId.ShipmentReceiptReceiptSeqId))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id ReceiptSeqId {0} but inner id ShipmentReceiptReceiptSeqId {1}", 
					oe.ShipmentReceiptEventId.ReceiptSeqId, e.ShipmentReceiptImageEventId.ShipmentReceiptReceiptSeqId);
			}
		}



        string IEventDto.EventType
        {
            get { return this.GetEventType(); }
        }

        protected abstract string GetEventType();

	}

    public abstract class ShipmentReceiptStateEventBase : ShipmentReceiptEventBase, IShipmentReceiptStateEvent
    {

		public virtual string ProductId { get; set; }

		public virtual string AttributeSetInstanceId { get; set; }

		public virtual string LocatorId { get; set; }

		public virtual string ShipmentItemSeqId { get; set; }

		public virtual string ShipmentPackageSeqId { get; set; }

		public virtual string OrderId { get; set; }

		public virtual string OrderItemSeqId { get; set; }

		public virtual string ReturnId { get; set; }

		public virtual string ReturnItemSeqId { get; set; }

		public virtual string RejectionReasonId { get; set; }

		public virtual string DamageReasonId { get; set; }

		public virtual string ReceivedBy { get; set; }

		public virtual DateTime? DatetimeReceived { get; set; }

		public virtual string ItemDescription { get; set; }

		public virtual decimal? AcceptedQuantity { get; set; }

		public virtual decimal? RejectedQuantity { get; set; }

		public virtual decimal? DamagedQuantity { get; set; }

		public virtual bool? Active { get; set; }

		public virtual ISet<string> DamageStatusIds { get; set; }

        protected ShipmentReceiptStateEventBase() : base()
        {
        }

        protected ShipmentReceiptStateEventBase(ShipmentReceiptEventId stateEventId) : base(stateEventId)
        {
        }

    }

	public class ShipmentReceiptStateCreated : ShipmentReceiptStateEventBase, IShipmentReceiptStateCreated, ISaveable
	{
		public ShipmentReceiptStateCreated () : this(new ShipmentReceiptEventId())
		{
		}

		public ShipmentReceiptStateCreated (ShipmentReceiptEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<ShipmentReceiptImageEventId, IShipmentReceiptImageStateCreated> _shipmentReceiptImageEvents = new Dictionary<ShipmentReceiptImageEventId, IShipmentReceiptImageStateCreated>();
        
        private IEnumerable<IShipmentReceiptImageStateCreated> _readOnlyShipmentReceiptImageEvents;

        public virtual IEnumerable<IShipmentReceiptImageStateCreated> ShipmentReceiptImageEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._shipmentReceiptImageEvents.Values;
                }
                else
                {
                    if (_readOnlyShipmentReceiptImageEvents != null) { return _readOnlyShipmentReceiptImageEvents; }
                    var eventDao = ShipmentReceiptImageEventDao;
                    var eL = new List<IShipmentReceiptImageStateCreated>();
                    foreach (var e in eventDao.FindByShipmentReceiptEventId(this.ShipmentReceiptEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IShipmentReceiptImageStateCreated)e);
                    }
                    return (_readOnlyShipmentReceiptImageEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddShipmentReceiptImageEvent(e);
                    }
                }
                else { this._shipmentReceiptImageEvents.Clear(); }
            }
        }
    
		public virtual void AddShipmentReceiptImageEvent(IShipmentReceiptImageStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._shipmentReceiptImageEvents[e.ShipmentReceiptImageEventId] = e;
		}

        public virtual IShipmentReceiptImageStateCreated NewShipmentReceiptImageStateCreated(string sequenceId)
        {
            var stateEvent = new ShipmentReceiptImageStateCreated(NewShipmentReceiptImageEventId(sequenceId));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IShipmentReceiptImageStateCreated e in this.ShipmentReceiptImageEvents) {
				ShipmentReceiptImageEventDao.Save(e);
			}
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class ShipmentReceiptStateMergePatched : ShipmentReceiptStateEventBase, IShipmentReceiptStateMergePatched, ISaveable
	{
		public virtual bool IsPropertyProductIdRemoved { get; set; }

		public virtual bool IsPropertyAttributeSetInstanceIdRemoved { get; set; }

		public virtual bool IsPropertyLocatorIdRemoved { get; set; }

		public virtual bool IsPropertyShipmentItemSeqIdRemoved { get; set; }

		public virtual bool IsPropertyShipmentPackageSeqIdRemoved { get; set; }

		public virtual bool IsPropertyOrderIdRemoved { get; set; }

		public virtual bool IsPropertyOrderItemSeqIdRemoved { get; set; }

		public virtual bool IsPropertyReturnIdRemoved { get; set; }

		public virtual bool IsPropertyReturnItemSeqIdRemoved { get; set; }

		public virtual bool IsPropertyRejectionReasonIdRemoved { get; set; }

		public virtual bool IsPropertyDamageStatusIdsRemoved { get; set; }

		public virtual bool IsPropertyDamageReasonIdRemoved { get; set; }

		public virtual bool IsPropertyReceivedByRemoved { get; set; }

		public virtual bool IsPropertyDatetimeReceivedRemoved { get; set; }

		public virtual bool IsPropertyItemDescriptionRemoved { get; set; }

		public virtual bool IsPropertyAcceptedQuantityRemoved { get; set; }

		public virtual bool IsPropertyRejectedQuantityRemoved { get; set; }

		public virtual bool IsPropertyDamagedQuantityRemoved { get; set; }

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public ShipmentReceiptStateMergePatched ()
		{
		}

		public ShipmentReceiptStateMergePatched (ShipmentReceiptEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<ShipmentReceiptImageEventId, IShipmentReceiptImageEvent> _shipmentReceiptImageEvents = new Dictionary<ShipmentReceiptImageEventId, IShipmentReceiptImageEvent>();

        private IEnumerable<IShipmentReceiptImageEvent> _readOnlyShipmentReceiptImageEvents;
        
        public virtual IEnumerable<IShipmentReceiptImageEvent> ShipmentReceiptImageEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._shipmentReceiptImageEvents.Values;
                }
                else
                {
                    if (_readOnlyShipmentReceiptImageEvents != null) { return _readOnlyShipmentReceiptImageEvents; }
                    var eventDao = ShipmentReceiptImageEventDao;
                    var eL = new List<IShipmentReceiptImageEvent>();
                    foreach (var e in eventDao.FindByShipmentReceiptEventId(this.ShipmentReceiptEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IShipmentReceiptImageEvent)e);
                    }
                    return (_readOnlyShipmentReceiptImageEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddShipmentReceiptImageEvent(e);
                    }
                }
                else { this._shipmentReceiptImageEvents.Clear(); }
            }
        }

		public virtual void AddShipmentReceiptImageEvent(IShipmentReceiptImageEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._shipmentReceiptImageEvents[e.ShipmentReceiptImageEventId] = e;
		}

        public virtual IShipmentReceiptImageStateCreated NewShipmentReceiptImageStateCreated(string sequenceId)
        {
            var stateEvent = new ShipmentReceiptImageStateCreated(NewShipmentReceiptImageEventId(sequenceId));
            return stateEvent;
        }

        public virtual IShipmentReceiptImageStateMergePatched NewShipmentReceiptImageStateMergePatched(string sequenceId)
        {
            var stateEvent = new ShipmentReceiptImageStateMergePatched(NewShipmentReceiptImageEventId(sequenceId));
            return stateEvent;
        }

        public virtual IShipmentReceiptImageStateRemoved NewShipmentReceiptImageStateRemoved(string sequenceId)
        {
            var stateEvent = new ShipmentReceiptImageStateRemoved(NewShipmentReceiptImageEventId(sequenceId));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IShipmentReceiptImageEvent e in this.ShipmentReceiptImageEvents) {
				ShipmentReceiptImageEventDao.Save(e);
			}
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}




}

