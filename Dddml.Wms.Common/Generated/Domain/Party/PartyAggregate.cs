// <autogenerated>
//   This file was generated by T4 code generator GeneratePartyDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Party;

namespace Dddml.Wms.Domain.Party
{
    public partial class PartyAggregate : AggregateBase, IPartyAggregate
    {

        readonly IPartyState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IPartyState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        string IGlobalIdentity<string>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public PartyAggregate(IPartyState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IPartyStateProperties)_state).Version == PartyState.VersionZero)
            {
                if (IsCommandCreate((IPartyCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (_state.Deleted)
            {
                throw DomainError.Named("zombie", "Can't do anything to deleted aggregate.");
            }
            if (IsCommandCreate((IPartyCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IPartyCommand c)
        {
            return c.Version == PartyState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateParty c)
        {
            IPartyStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchParty c)
        {
            IPartyStateMergePatched e = Map(c);
            Apply(e);
        }

        public virtual void Delete(IDeleteParty c)
        {
            IPartyStateDeleted e = Map(c);
            Apply(e);
        }


        protected virtual IPartyStateCreated Map(ICreateParty c)
        {
			var stateEventId = new PartyEventId(c.PartyId, c.Version);
            IPartyStateCreated e = NewPartyStateCreated(stateEventId);
		
            e.PartyTypeId = c.PartyTypeId;
            e.PrimaryRoleTypeId = c.PrimaryRoleTypeId;
            e.ExternalId = c.ExternalId;
            e.PreferredCurrencyUomId = c.PreferredCurrencyUomId;
            e.Description = c.Description;
            e.OrganizationName = c.OrganizationName;
            e.IsSummary = c.IsSummary;
            e.Salutation = c.Salutation;
            e.FirstName = c.FirstName;
            e.MiddleName = c.MiddleName;
            e.LastName = c.LastName;
            e.PersonalTitle = c.PersonalTitle;
            e.Nickname = c.Nickname;
            e.CardId = c.CardId;
            e.Active = c.Active;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
			var version = c.Version;


            return e;
        }

        protected virtual IPartyStateMergePatched Map(IMergePatchParty c)
        {
			var stateEventId = new PartyEventId(c.PartyId, c.Version);
            IPartyStateMergePatched e = NewPartyStateMergePatched(stateEventId);

            e.PartyTypeId = c.PartyTypeId;
            e.PrimaryRoleTypeId = c.PrimaryRoleTypeId;
            e.ExternalId = c.ExternalId;
            e.PreferredCurrencyUomId = c.PreferredCurrencyUomId;
            e.Description = c.Description;
            e.OrganizationName = c.OrganizationName;
            e.IsSummary = c.IsSummary;
            e.Salutation = c.Salutation;
            e.FirstName = c.FirstName;
            e.MiddleName = c.MiddleName;
            e.LastName = c.LastName;
            e.PersonalTitle = c.PersonalTitle;
            e.Nickname = c.Nickname;
            e.CardId = c.CardId;
            e.Active = c.Active;
            e.IsPropertyPartyTypeIdRemoved = c.IsPropertyPartyTypeIdRemoved;
            e.IsPropertyPrimaryRoleTypeIdRemoved = c.IsPropertyPrimaryRoleTypeIdRemoved;
            e.IsPropertyExternalIdRemoved = c.IsPropertyExternalIdRemoved;
            e.IsPropertyPreferredCurrencyUomIdRemoved = c.IsPropertyPreferredCurrencyUomIdRemoved;
            e.IsPropertyDescriptionRemoved = c.IsPropertyDescriptionRemoved;
            e.IsPropertyOrganizationNameRemoved = c.IsPropertyOrganizationNameRemoved;
            e.IsPropertyIsSummaryRemoved = c.IsPropertyIsSummaryRemoved;
            e.IsPropertySalutationRemoved = c.IsPropertySalutationRemoved;
            e.IsPropertyFirstNameRemoved = c.IsPropertyFirstNameRemoved;
            e.IsPropertyMiddleNameRemoved = c.IsPropertyMiddleNameRemoved;
            e.IsPropertyLastNameRemoved = c.IsPropertyLastNameRemoved;
            e.IsPropertyPersonalTitleRemoved = c.IsPropertyPersonalTitleRemoved;
            e.IsPropertyNicknameRemoved = c.IsPropertyNicknameRemoved;
            e.IsPropertyCardIdRemoved = c.IsPropertyCardIdRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

			var version = c.Version;


            return e;
        }

        protected virtual IPartyStateDeleted Map(IDeleteParty c)
        {
			var stateEventId = new PartyEventId(c.PartyId, c.Version);
            IPartyStateDeleted e = NewPartyStateDeleted(stateEventId);
			
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();


            return e;
        }

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected PartyStateCreated NewPartyStateCreated(long version, string commandId, string requesterId)
        {
            var stateEventId = new PartyEventId(_state.PartyId, version);
            var e = NewPartyStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

        protected PartyStateMergePatched NewPartyStateMergePatched(long version, string commandId, string requesterId)
        {
            var stateEventId = new PartyEventId(_state.PartyId, version);
            var e = NewPartyStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }


        protected PartyStateDeleted NewPartyStateDeleted(long version, string commandId, string requesterId)
        {
            var stateEventId = new PartyEventId(_state.PartyId, version);
            var e = NewPartyStateDeleted(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

////////////////////////

		private PartyStateCreated NewPartyStateCreated(PartyEventId stateEventId)
		{
			return new PartyStateCreated(stateEventId);			
		}

        private PartyStateMergePatched NewPartyStateMergePatched(PartyEventId stateEventId)
		{
			return new PartyStateMergePatched(stateEventId);
		}

        private PartyStateDeleted NewPartyStateDeleted(PartyEventId stateEventId)
		{
			return new PartyStateDeleted(stateEventId);
		}
    }

}

