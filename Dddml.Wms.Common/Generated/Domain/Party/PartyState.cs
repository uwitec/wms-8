// <autogenerated>
//   This file was generated by T4 code generator GeneratePartyDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Party;

namespace Dddml.Wms.Domain.Party
{

	public partial class PartyState : PartyStateProperties, IPartyState
	{

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

		public virtual string UpdatedBy { get; set; }

		public virtual DateTime UpdatedAt { get; set; }

		public virtual bool Deleted { get; set; }


		#region IIdentity implementation

		string IGlobalIdentity<string>.GlobalId
		{
			get
			{
				return this.PartyId;
			}
		}

		#endregion

		#region IActive implementation

		bool IActive.IsActive()
		{
			return this.Active;
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
			get
			{
				return this.Deleted;
			}
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
			get
			{
				return this.CreatedBy;
			}
			set
			{
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt
		{
			get
			{
				return this.CreatedAt;
			}
			set
			{
				this.CreatedAt = value;
			}
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
			get { return this.UpdatedBy; }
			set { this.UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
			get { return this.UpdatedAt; }
			set { this.UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IAggregateVersioned<long>.AggregateVersion
		{
			get
			{
				return this.Version;
			}
		}


		#endregion

        bool IPartyState.IsUnsaved
        {
            get { return this.Version == VersionZero; }
        }

		public static long VersionZero
		{
			get
			{
				return (long)0;
			}
		}


        public virtual bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }
	
        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public PartyState(IEnumerable<IEvent> events) : this(true)
        {
            if (events != null && events.Count() > 0)
            {
                this.PartyId = ((IPartyEvent)events.First()).PartyEventId.PartyId;
                foreach (var e in events)
                {
                    Mutate(e);
                    this.Version += 1;
                }
            }
        }

        public PartyState() : this(false)
        {
        }

        public PartyState(bool forReapplying)
        {
            this._forReapplying = forReapplying;
            InitializeProperties();
        }


		public virtual void When(IPartyStateCreated e)
		{
			ThrowOnWrongEvent(e);
			this.PartyTypeId = e.PartyTypeId;

			this.PrimaryRoleTypeId = e.PrimaryRoleTypeId;

			this.ExternalId = e.ExternalId;

			this.PreferredCurrencyUomId = e.PreferredCurrencyUomId;

			this.Description = e.Description;

			this.OrganizationName = e.OrganizationName;

            this.IsSummary = (e.IsSummary != null && e.IsSummary.HasValue) ? e.IsSummary.Value : default(bool);

			this.Salutation = e.Salutation;

			this.FirstName = e.FirstName;

			this.MiddleName = e.MiddleName;

			this.LastName = e.LastName;

			this.PersonalTitle = e.PersonalTitle;

			this.Nickname = e.Nickname;

			this.CardId = e.CardId;

            this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);

			this.Deleted = false;

			this.CreatedBy = e.CreatedBy;
			this.CreatedAt = e.CreatedAt;


		}


		public virtual void When(IPartyStateMergePatched e)
		{
			ThrowOnWrongEvent(e);

			if (e.PartyTypeId == null)
			{
				if (e.IsPropertyPartyTypeIdRemoved)
				{
					this.PartyTypeId = default(string);
				}
			}
			else
			{
				this.PartyTypeId = e.PartyTypeId;
			}

			if (e.PrimaryRoleTypeId == null)
			{
				if (e.IsPropertyPrimaryRoleTypeIdRemoved)
				{
					this.PrimaryRoleTypeId = default(string);
				}
			}
			else
			{
				this.PrimaryRoleTypeId = e.PrimaryRoleTypeId;
			}

			if (e.ExternalId == null)
			{
				if (e.IsPropertyExternalIdRemoved)
				{
					this.ExternalId = default(string);
				}
			}
			else
			{
				this.ExternalId = e.ExternalId;
			}

			if (e.PreferredCurrencyUomId == null)
			{
				if (e.IsPropertyPreferredCurrencyUomIdRemoved)
				{
					this.PreferredCurrencyUomId = default(string);
				}
			}
			else
			{
				this.PreferredCurrencyUomId = e.PreferredCurrencyUomId;
			}

			if (e.Description == null)
			{
				if (e.IsPropertyDescriptionRemoved)
				{
					this.Description = default(string);
				}
			}
			else
			{
				this.Description = e.Description;
			}

			if (e.OrganizationName == null)
			{
				if (e.IsPropertyOrganizationNameRemoved)
				{
					this.OrganizationName = default(string);
				}
			}
			else
			{
				this.OrganizationName = e.OrganizationName;
			}

			if (e.IsSummary == null)
			{
				if (e.IsPropertyIsSummaryRemoved)
				{
					this.IsSummary = default(bool);
				}
			}
			else
			{
				this.IsSummary = (e.IsSummary != null && e.IsSummary.HasValue) ? e.IsSummary.Value : default(bool);
			}

			if (e.Salutation == null)
			{
				if (e.IsPropertySalutationRemoved)
				{
					this.Salutation = default(string);
				}
			}
			else
			{
				this.Salutation = e.Salutation;
			}

			if (e.FirstName == null)
			{
				if (e.IsPropertyFirstNameRemoved)
				{
					this.FirstName = default(string);
				}
			}
			else
			{
				this.FirstName = e.FirstName;
			}

			if (e.MiddleName == null)
			{
				if (e.IsPropertyMiddleNameRemoved)
				{
					this.MiddleName = default(string);
				}
			}
			else
			{
				this.MiddleName = e.MiddleName;
			}

			if (e.LastName == null)
			{
				if (e.IsPropertyLastNameRemoved)
				{
					this.LastName = default(string);
				}
			}
			else
			{
				this.LastName = e.LastName;
			}

			if (e.PersonalTitle == null)
			{
				if (e.IsPropertyPersonalTitleRemoved)
				{
					this.PersonalTitle = default(string);
				}
			}
			else
			{
				this.PersonalTitle = e.PersonalTitle;
			}

			if (e.Nickname == null)
			{
				if (e.IsPropertyNicknameRemoved)
				{
					this.Nickname = default(string);
				}
			}
			else
			{
				this.Nickname = e.Nickname;
			}

			if (e.CardId == null)
			{
				if (e.IsPropertyCardIdRemoved)
				{
					this.CardId = default(string);
				}
			}
			else
			{
				this.CardId = e.CardId;
			}

			if (e.Active == null)
			{
				if (e.IsPropertyActiveRemoved)
				{
					this.Active = default(bool);
				}
			}
			else
			{
				this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);
			}


			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;


		}

		public virtual void When(IPartyStateDeleted e)
		{
			ThrowOnWrongEvent(e);

			this.Deleted = true;
			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;

		}


		public virtual void Mutate(IEvent e)
		{
            StateReadOnly = false;
			((dynamic)this).When((dynamic)e);
		}

        protected void ThrowOnWrongEvent(IPartyEvent e)
        {
            var id = new System.Text.StringBuilder(); 
            id.Append("[").Append("Party|");

            var stateEntityId = this.PartyId; // Aggregate Id
            var eventEntityId = e.PartyEventId.PartyId;
            if (stateEntityId != eventEntityId)
            {
                throw DomainError.Named("mutateWrongEntity", "Entity Id {0} in state but entity id {1} in event", stateEntityId, eventEntityId);
            }
            id.Append(stateEntityId).Append(",");

            id.Append("]");

            var stateVersion = this.Version;
            var eventVersion = e.PartyEventId.Version;
            if (stateVersion != eventVersion)
            {
                throw OptimisticConcurrencyException.Create(stateVersion, eventVersion, id.ToString());
            }
        }
    }

    public class OrganizationState : PartyState, IOrganizationState
    {
        public OrganizationState() : base()
        {}

        public OrganizationState(bool b) : base(b)
        {}
    }

    public class PersonState : PartyState, IPersonState
    {
        public PersonState() : base()
        {}

        public PersonState(bool b) : base(b)
        {}
    }

}

