// <autogenerated>
//   This file was generated by T4 code generator GenerateInOutDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InOut;

namespace Dddml.Wms.Domain.InOut
{
    public partial class InOutAggregate : AggregateBase, IInOutAggregate
    {

        readonly IInOutState _state;

        readonly IList<IEvent> _changes = new List<IEvent>();

        public IInOutState State
        {
            get
            {
                return _state;
            }
        }

        public IList<IEvent> Changes
        {
            get
            {
                return _changes;
            }
        }

        #region IIdentity implementation

        string IGlobalIdentity<string>.GlobalId
        {
            get
            {
                return this._state.GlobalId;
            }
        }

        #endregion


        public InOutAggregate(IInOutState state)
        {
            _state = state;
        }


        public virtual void ThrowOnInvalidStateTransition(ICommand c)
        {
            if (((IInOutStateProperties)_state).Version == InOutState.VersionZero)
            {
                if (IsCommandCreate((IInOutCommand)c))
                {
                    return;
                }
                throw DomainError.Named("premature", "Can't do anything to unexistent aggregate");
            }
            if (IsCommandCreate((IInOutCommand)c))
                throw DomainError.Named("rebirth", "Can't create aggregate that already exists");
        }

        private static bool IsCommandCreate(IInOutCommand c)
        {
            return c.Version == InOutState.VersionZero;
        }

        protected internal virtual void Apply(IEvent e)
        {
            OnApplying(e);
            _state.Mutate(e);
            _changes.Add(e);
        }

        public virtual void Create(ICreateInOut c)
        {
            IInOutStateCreated e = Map(c);
            Apply(e);
        }

        public virtual void MergePatch(IMergePatchInOut c)
        {
            IInOutStateMergePatched e = Map(c);
            Apply(e);
        }


        protected virtual IInOutStateCreated Map(ICreateInOut c)
        {
			var stateEventId = new InOutEventId(c.DocumentNumber, c.Version);
            IInOutStateCreated e = NewInOutStateCreated(stateEventId);
		
            NewInOutDocumentActionCommandAndExecute(c, _state, e);
            e.Posted = c.Posted;
            e.Processed = c.Processed;
            e.Processing = c.Processing;
            e.DocumentTypeId = c.DocumentTypeId;
            e.Description = c.Description;
            e.OrderId = c.OrderId;
            e.DateOrdered = c.DateOrdered;
            e.IsPrinted = c.IsPrinted;
            e.MovementTypeId = c.MovementTypeId;
            e.MovementDate = c.MovementDate;
            e.BusinessPartnerId = c.BusinessPartnerId;
            e.WarehouseId = c.WarehouseId;
            e.POReference = c.POReference;
            e.FreightAmount = c.FreightAmount;
            e.ShipperId = c.ShipperId;
            e.ChargeAmount = c.ChargeAmount;
            e.DatePrinted = c.DatePrinted;
            e.CreatedFrom = c.CreatedFrom;
            e.SalesRepresentativeId = c.SalesRepresentativeId;
            e.NumberOfPackages = c.NumberOfPackages;
            e.PickDate = c.PickDate;
            e.ShipDate = c.ShipDate;
            e.TrackingNumber = c.TrackingNumber;
            e.DateReceived = c.DateReceived;
            e.IsInTransit = c.IsInTransit;
            e.IsApproved = c.IsApproved;
            e.IsInDispute = c.IsInDispute;
            e.RmaDocumentNumber = c.RmaDocumentNumber;
            e.ReversalDocumentNumber = c.ReversalDocumentNumber;
            e.Active = c.Active;
            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
			var version = c.Version;

            foreach (ICreateInOutImage innerCommand in c.InOutImages)
            {
                ThrowOnInconsistentCommands(c, innerCommand);

                IInOutImageStateCreated innerEvent = MapCreate(innerCommand, c, version, _state);
                e.AddInOutImageEvent(innerEvent);
            }

            foreach (ICreateInOutLine innerCommand in c.InOutLines)
            {
                ThrowOnInconsistentCommands(c, innerCommand);

                IInOutLineStateCreated innerEvent = MapCreate(innerCommand, c, version, _state);
                e.AddInOutLineEvent(innerEvent);
            }


            return e;
        }

        protected virtual IInOutStateMergePatched Map(IMergePatchInOut c)
        {
			var stateEventId = new InOutEventId(c.DocumentNumber, c.Version);
            IInOutStateMergePatched e = NewInOutStateMergePatched(stateEventId);

            e.Posted = c.Posted;
            e.Processed = c.Processed;
            e.Processing = c.Processing;
            e.DocumentTypeId = c.DocumentTypeId;
            e.Description = c.Description;
            e.OrderId = c.OrderId;
            e.DateOrdered = c.DateOrdered;
            e.IsPrinted = c.IsPrinted;
            e.MovementTypeId = c.MovementTypeId;
            e.MovementDate = c.MovementDate;
            e.BusinessPartnerId = c.BusinessPartnerId;
            e.WarehouseId = c.WarehouseId;
            e.POReference = c.POReference;
            e.FreightAmount = c.FreightAmount;
            e.ShipperId = c.ShipperId;
            e.ChargeAmount = c.ChargeAmount;
            e.DatePrinted = c.DatePrinted;
            e.CreatedFrom = c.CreatedFrom;
            e.SalesRepresentativeId = c.SalesRepresentativeId;
            e.NumberOfPackages = c.NumberOfPackages;
            e.PickDate = c.PickDate;
            e.ShipDate = c.ShipDate;
            e.TrackingNumber = c.TrackingNumber;
            e.DateReceived = c.DateReceived;
            e.IsInTransit = c.IsInTransit;
            e.IsApproved = c.IsApproved;
            e.IsInDispute = c.IsInDispute;
            e.RmaDocumentNumber = c.RmaDocumentNumber;
            e.ReversalDocumentNumber = c.ReversalDocumentNumber;
            e.Active = c.Active;
            e.IsPropertyPostedRemoved = c.IsPropertyPostedRemoved;
            e.IsPropertyProcessedRemoved = c.IsPropertyProcessedRemoved;
            e.IsPropertyProcessingRemoved = c.IsPropertyProcessingRemoved;
            e.IsPropertyDocumentTypeIdRemoved = c.IsPropertyDocumentTypeIdRemoved;
            e.IsPropertyDescriptionRemoved = c.IsPropertyDescriptionRemoved;
            e.IsPropertyOrderIdRemoved = c.IsPropertyOrderIdRemoved;
            e.IsPropertyDateOrderedRemoved = c.IsPropertyDateOrderedRemoved;
            e.IsPropertyIsPrintedRemoved = c.IsPropertyIsPrintedRemoved;
            e.IsPropertyMovementTypeIdRemoved = c.IsPropertyMovementTypeIdRemoved;
            e.IsPropertyMovementDateRemoved = c.IsPropertyMovementDateRemoved;
            e.IsPropertyBusinessPartnerIdRemoved = c.IsPropertyBusinessPartnerIdRemoved;
            e.IsPropertyWarehouseIdRemoved = c.IsPropertyWarehouseIdRemoved;
            e.IsPropertyPOReferenceRemoved = c.IsPropertyPOReferenceRemoved;
            e.IsPropertyFreightAmountRemoved = c.IsPropertyFreightAmountRemoved;
            e.IsPropertyShipperIdRemoved = c.IsPropertyShipperIdRemoved;
            e.IsPropertyChargeAmountRemoved = c.IsPropertyChargeAmountRemoved;
            e.IsPropertyDatePrintedRemoved = c.IsPropertyDatePrintedRemoved;
            e.IsPropertyCreatedFromRemoved = c.IsPropertyCreatedFromRemoved;
            e.IsPropertySalesRepresentativeIdRemoved = c.IsPropertySalesRepresentativeIdRemoved;
            e.IsPropertyNumberOfPackagesRemoved = c.IsPropertyNumberOfPackagesRemoved;
            e.IsPropertyPickDateRemoved = c.IsPropertyPickDateRemoved;
            e.IsPropertyShipDateRemoved = c.IsPropertyShipDateRemoved;
            e.IsPropertyTrackingNumberRemoved = c.IsPropertyTrackingNumberRemoved;
            e.IsPropertyDateReceivedRemoved = c.IsPropertyDateReceivedRemoved;
            e.IsPropertyIsInTransitRemoved = c.IsPropertyIsInTransitRemoved;
            e.IsPropertyIsApprovedRemoved = c.IsPropertyIsApprovedRemoved;
            e.IsPropertyIsInDisputeRemoved = c.IsPropertyIsInDisputeRemoved;
            e.IsPropertyRmaDocumentNumberRemoved = c.IsPropertyRmaDocumentNumberRemoved;
            e.IsPropertyReversalDocumentNumberRemoved = c.IsPropertyReversalDocumentNumberRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            e.CommandId = c.CommandId;


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

			var version = c.Version;

            foreach (IInOutImageCommand innerCommand in c.InOutImageCommands)
            {
                ThrowOnInconsistentCommands(c, innerCommand);

                IInOutImageEvent innerEvent = Map(innerCommand, c, version, _state);
                e.AddInOutImageEvent(innerEvent);
            }

            foreach (IInOutLineCommand innerCommand in c.InOutLineCommands)
            {
                ThrowOnInconsistentCommands(c, innerCommand);

                IInOutLineEvent innerEvent = Map(innerCommand, c, version, _state);
                e.AddInOutLineEvent(innerEvent);
            }


            return e;
        }


        protected void ThrowOnInconsistentCommands(IInOutCommand command, IInOutImageCommand innerCommand)
        {

            var properties =  command as ICreateOrMergePatchOrDeleteInOut;
            var innerProperties = innerCommand as ICreateOrMergePatchOrRemoveInOutImage;
            if (properties == null || innerProperties == null) { return; }
            if (innerProperties.InOutDocumentNumber == default(string))
            {
                innerProperties.InOutDocumentNumber = properties.DocumentNumber;
            }
            else
            {
                var outerDocumentNumberName = "DocumentNumber";
                var outerDocumentNumberValue = properties.DocumentNumber;
                var innerInOutDocumentNumberName = "InOutDocumentNumber";
                var innerInOutDocumentNumberValue = innerProperties.InOutDocumentNumber;
                ThrowOnInconsistentIds(innerProperties, innerInOutDocumentNumberName, innerInOutDocumentNumberValue, outerDocumentNumberName, outerDocumentNumberValue);
            }

        }// END ThrowOnInconsistentCommands /////////////////////


        protected void ThrowOnInconsistentCommands(IInOutCommand command, IInOutLineCommand innerCommand)
        {

            var properties =  command as ICreateOrMergePatchOrDeleteInOut;
            var innerProperties = innerCommand as ICreateOrMergePatchOrRemoveInOutLine;
            if (properties == null || innerProperties == null) { return; }
            if (innerProperties.InOutDocumentNumber == default(string))
            {
                innerProperties.InOutDocumentNumber = properties.DocumentNumber;
            }
            else
            {
                var outerDocumentNumberName = "DocumentNumber";
                var outerDocumentNumberValue = properties.DocumentNumber;
                var innerInOutDocumentNumberName = "InOutDocumentNumber";
                var innerInOutDocumentNumberValue = innerProperties.InOutDocumentNumber;
                ThrowOnInconsistentIds(innerProperties, innerInOutDocumentNumberName, innerInOutDocumentNumberValue, outerDocumentNumberName, outerDocumentNumberValue);
            }

        }// END ThrowOnInconsistentCommands /////////////////////


        protected void ThrowOnInconsistentCommands(IInOutLineCommand command, IInOutLineImageCommand innerCommand)
        {

            var properties =  command as ICreateOrMergePatchOrRemoveInOutLine;
            var innerProperties = innerCommand as ICreateOrMergePatchOrRemoveInOutLineImage;
            if (properties == null || innerProperties == null) { return; }
            if (innerProperties.InOutDocumentNumber == default(string))
            {
                innerProperties.InOutDocumentNumber = properties.InOutDocumentNumber;
            }
            else
            {
                var outerInOutDocumentNumberName = "InOutDocumentNumber";
                var outerInOutDocumentNumberValue = properties.InOutDocumentNumber;
                var innerInOutDocumentNumberName = "InOutDocumentNumber";
                var innerInOutDocumentNumberValue = innerProperties.InOutDocumentNumber;
                ThrowOnInconsistentIds(innerProperties, innerInOutDocumentNumberName, innerInOutDocumentNumberValue, outerInOutDocumentNumberName, outerInOutDocumentNumberValue);
            }

            if (innerProperties.InOutLineLineNumber == default(string))
            {
                innerProperties.InOutLineLineNumber = properties.LineNumber;
            }
            else
            {
                var outerLineNumberName = "LineNumber";
                var outerLineNumberValue = properties.LineNumber;
                var innerInOutLineLineNumberName = "InOutLineLineNumber";
                var innerInOutLineLineNumberValue = innerProperties.InOutLineLineNumber;
                ThrowOnInconsistentIds(innerProperties, innerInOutLineLineNumberName, innerInOutLineLineNumberValue, outerLineNumberName, outerLineNumberValue);
            }

        }// END ThrowOnInconsistentCommands /////////////////////


        protected virtual IInOutImageEvent Map(IInOutImageCommand c, IInOutCommand outerCommand, long version, IInOutState outerState)
        {
            var create = (c.CommandType == CommandType.Create) ? (c as ICreateInOutImage) : null;
            if(create != null)
            {
                return MapCreate(create, outerCommand, version, outerState);
            }

            var merge = (c.CommandType == CommandType.MergePatch || c.CommandType == null) ? (c as IMergePatchInOutImage) : null;
            if(merge != null)
            {
                return MapMergePatch(merge, outerCommand, version, outerState);
            }

            var remove = (c.CommandType == CommandType.Remove) ? (c as IRemoveInOutImage) : null;
            if (remove != null)
            {
                return MapRemove(remove, outerCommand, version);
            }
            throw new NotSupportedException();
        }


        protected virtual IInOutImageStateCreated MapCreate(ICreateInOutImage c, IInOutCommand outerCommand, long version, IInOutState outerState)
        {
            c.RequesterId = outerCommand.RequesterId;
			var stateEventId = new InOutImageEventId(c.InOutDocumentNumber, c.SequenceId, version);
            IInOutImageStateCreated e = NewInOutImageStateCreated(stateEventId);
            var s = outerState.InOutImages.Get(c.SequenceId, true);

            e.Url = c.Url;
            e.Active = c.Active;

            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
            return e;

        }// END Map(ICreate... ////////////////////////////



        protected virtual IInOutImageStateMergePatched MapMergePatch(IMergePatchInOutImage c, IInOutCommand outerCommand, long version, IInOutState outerState)
        {
            c.RequesterId = outerCommand.RequesterId;
			var stateEventId = new InOutImageEventId(c.InOutDocumentNumber, c.SequenceId, version);
            IInOutImageStateMergePatched e = NewInOutImageStateMergePatched(stateEventId);
            var s = outerState.InOutImages.Get(c.SequenceId);

            e.Url = c.Url;
            e.Active = c.Active;
            e.IsPropertyUrlRemoved = c.IsPropertyUrlRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
            return e;

        }// END Map(IMergePatch... ////////////////////////////


        protected virtual IInOutImageStateRemoved MapRemove(IRemoveInOutImage c, IInOutCommand outerCommand, long version)
        {
            c.RequesterId = outerCommand.RequesterId;
			var stateEventId = new InOutImageEventId(c.InOutDocumentNumber, c.SequenceId, version);
            IInOutImageStateRemoved e = NewInOutImageStateRemoved(stateEventId);


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;

        }// END Map(IRemove... ////////////////////////////


        protected virtual IInOutLineEvent Map(IInOutLineCommand c, IInOutCommand outerCommand, long version, IInOutState outerState)
        {
            var create = (c.CommandType == CommandType.Create) ? (c as ICreateInOutLine) : null;
            if(create != null)
            {
                return MapCreate(create, outerCommand, version, outerState);
            }

            var merge = (c.CommandType == CommandType.MergePatch || c.CommandType == null) ? (c as IMergePatchInOutLine) : null;
            if(merge != null)
            {
                return MapMergePatch(merge, outerCommand, version, outerState);
            }

            var remove = (c.CommandType == CommandType.Remove) ? (c as IRemoveInOutLine) : null;
            if (remove != null)
            {
                return MapRemove(remove, outerCommand, version);
            }
            throw new NotSupportedException();
        }


        protected virtual IInOutLineStateCreated MapCreate(ICreateInOutLine c, IInOutCommand outerCommand, long version, IInOutState outerState)
        {
            c.RequesterId = outerCommand.RequesterId;
			var stateEventId = new InOutLineEventId(c.InOutDocumentNumber, c.LineNumber, version);
            IInOutLineStateCreated e = NewInOutLineStateCreated(stateEventId);
            var s = outerState.InOutLines.Get(c.LineNumber, true);

            e.LocatorId = c.LocatorId;
            e.ProductId = c.ProductId;
            e.AttributeSetInstanceId = c.AttributeSetInstanceId;
            e.DamageStatusIds = c.DamageStatusIds;
            e.Description = c.Description;
            e.QuantityUomId = c.QuantityUomId;
            e.MovementQuantity = c.MovementQuantity;
            e.PickedQuantity = c.PickedQuantity;
            e.IsInvoiced = c.IsInvoiced;
            e.Processed = c.Processed;
            e.RmaLineNumber = c.RmaLineNumber;
            e.ReversalLineNumber = c.ReversalLineNumber;
            e.Active = c.Active;

            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            foreach (ICreateInOutLineImage innerCommand in c.InOutLineImages)
            {
                ThrowOnInconsistentCommands(c, innerCommand);

                IInOutLineImageStateCreated innerEvent = MapCreate(innerCommand, c, version, s);
                e.AddInOutLineImageEvent(innerEvent);
            }

            return e;

        }// END Map(ICreate... ////////////////////////////



        protected virtual IInOutLineStateMergePatched MapMergePatch(IMergePatchInOutLine c, IInOutCommand outerCommand, long version, IInOutState outerState)
        {
            c.RequesterId = outerCommand.RequesterId;
			var stateEventId = new InOutLineEventId(c.InOutDocumentNumber, c.LineNumber, version);
            IInOutLineStateMergePatched e = NewInOutLineStateMergePatched(stateEventId);
            var s = outerState.InOutLines.Get(c.LineNumber);

            e.LocatorId = c.LocatorId;
            e.ProductId = c.ProductId;
            e.AttributeSetInstanceId = c.AttributeSetInstanceId;
            e.DamageStatusIds = c.DamageStatusIds;
            e.Description = c.Description;
            e.QuantityUomId = c.QuantityUomId;
            e.MovementQuantity = c.MovementQuantity;
            e.PickedQuantity = c.PickedQuantity;
            e.IsInvoiced = c.IsInvoiced;
            e.Processed = c.Processed;
            e.RmaLineNumber = c.RmaLineNumber;
            e.ReversalLineNumber = c.ReversalLineNumber;
            e.Active = c.Active;
            e.IsPropertyLocatorIdRemoved = c.IsPropertyLocatorIdRemoved;
            e.IsPropertyProductIdRemoved = c.IsPropertyProductIdRemoved;
            e.IsPropertyAttributeSetInstanceIdRemoved = c.IsPropertyAttributeSetInstanceIdRemoved;
            e.IsPropertyDamageStatusIdsRemoved = c.IsPropertyDamageStatusIdsRemoved;
            e.IsPropertyDescriptionRemoved = c.IsPropertyDescriptionRemoved;
            e.IsPropertyQuantityUomIdRemoved = c.IsPropertyQuantityUomIdRemoved;
            e.IsPropertyMovementQuantityRemoved = c.IsPropertyMovementQuantityRemoved;
            e.IsPropertyPickedQuantityRemoved = c.IsPropertyPickedQuantityRemoved;
            e.IsPropertyIsInvoicedRemoved = c.IsPropertyIsInvoicedRemoved;
            e.IsPropertyProcessedRemoved = c.IsPropertyProcessedRemoved;
            e.IsPropertyRmaLineNumberRemoved = c.IsPropertyRmaLineNumberRemoved;
            e.IsPropertyReversalLineNumberRemoved = c.IsPropertyReversalLineNumberRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            foreach (IInOutLineImageCommand innerCommand in c.InOutLineImageCommands)
            {
                ThrowOnInconsistentCommands(c, innerCommand);

                IInOutLineImageEvent innerEvent = Map(innerCommand, c, version, s);
                e.AddInOutLineImageEvent(innerEvent);
            }

            return e;

        }// END Map(IMergePatch... ////////////////////////////


        protected virtual IInOutLineStateRemoved MapRemove(IRemoveInOutLine c, IInOutCommand outerCommand, long version)
        {
            c.RequesterId = outerCommand.RequesterId;
			var stateEventId = new InOutLineEventId(c.InOutDocumentNumber, c.LineNumber, version);
            IInOutLineStateRemoved e = NewInOutLineStateRemoved(stateEventId);


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;

        }// END Map(IRemove... ////////////////////////////


        protected virtual IInOutLineImageEvent Map(IInOutLineImageCommand c, IInOutLineCommand outerCommand, long version, IInOutLineState outerState)
        {
            var create = (c.CommandType == CommandType.Create) ? (c as ICreateInOutLineImage) : null;
            if(create != null)
            {
                return MapCreate(create, outerCommand, version, outerState);
            }

            var merge = (c.CommandType == CommandType.MergePatch || c.CommandType == null) ? (c as IMergePatchInOutLineImage) : null;
            if(merge != null)
            {
                return MapMergePatch(merge, outerCommand, version, outerState);
            }

            var remove = (c.CommandType == CommandType.Remove) ? (c as IRemoveInOutLineImage) : null;
            if (remove != null)
            {
                return MapRemove(remove, outerCommand, version);
            }
            throw new NotSupportedException();
        }


        protected virtual IInOutLineImageStateCreated MapCreate(ICreateInOutLineImage c, IInOutLineCommand outerCommand, long version, IInOutLineState outerState)
        {
            c.RequesterId = outerCommand.RequesterId;
			var stateEventId = new InOutLineImageEventId(c.InOutDocumentNumber, c.InOutLineLineNumber, c.SequenceId, version);
            IInOutLineImageStateCreated e = NewInOutLineImageStateCreated(stateEventId);
            var s = outerState.InOutLineImages.Get(c.SequenceId, true);

            e.Url = c.Url;
            e.Active = c.Active;

            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
            return e;

        }// END Map(ICreate... ////////////////////////////



        protected virtual IInOutLineImageStateMergePatched MapMergePatch(IMergePatchInOutLineImage c, IInOutLineCommand outerCommand, long version, IInOutLineState outerState)
        {
            c.RequesterId = outerCommand.RequesterId;
			var stateEventId = new InOutLineImageEventId(c.InOutDocumentNumber, c.InOutLineLineNumber, c.SequenceId, version);
            IInOutLineImageStateMergePatched e = NewInOutLineImageStateMergePatched(stateEventId);
            var s = outerState.InOutLineImages.Get(c.SequenceId);

            e.Url = c.Url;
            e.Active = c.Active;
            e.IsPropertyUrlRemoved = c.IsPropertyUrlRemoved;
            e.IsPropertyActiveRemoved = c.IsPropertyActiveRemoved;

            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();
            return e;

        }// END Map(IMergePatch... ////////////////////////////


        protected virtual IInOutLineImageStateRemoved MapRemove(IRemoveInOutLineImage c, IInOutLineCommand outerCommand, long version)
        {
            c.RequesterId = outerCommand.RequesterId;
			var stateEventId = new InOutLineImageEventId(c.InOutDocumentNumber, c.InOutLineLineNumber, c.SequenceId, version);
            IInOutLineImageStateRemoved e = NewInOutLineImageStateRemoved(stateEventId);


            e.CreatedBy = (string)c.RequesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;

        }// END Map(IRemove... ////////////////////////////

        private void ThrowOnInconsistentIds(object innerObject, string innerIdName, object innerIdValue, string outerIdName, object outerIdValue)
        {
            if (!Object.Equals(innerIdValue, outerIdValue))
            {
                if (innerIdValue is string && outerIdValue is string && ((string)innerIdValue).Normalize() == ((string)outerIdValue).Normalize())
                {
                    return;
                }
                throw DomainError.Named("inconsistentId", "Outer {0} {1} NOT equals inner {2} {3}", outerIdName, outerIdValue, innerIdName, innerIdValue);
            }
        }

////////////////////////

        protected InOutStateCreated NewInOutStateCreated(long version, string commandId, string requesterId)
        {
            var stateEventId = new InOutEventId(_state.DocumentNumber, version);
            var e = NewInOutStateCreated(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }

        protected InOutStateMergePatched NewInOutStateMergePatched(long version, string commandId, string requesterId)
        {
            var stateEventId = new InOutEventId(_state.DocumentNumber, version);
            var e = NewInOutStateMergePatched(stateEventId);

            e.CommandId = commandId;

            e.CreatedBy = (string)requesterId;
            e.CreatedAt = ApplicationContext.Current.TimestampService.Now<DateTime>();

            return e;
        }


////////////////////////

		private InOutStateCreated NewInOutStateCreated(InOutEventId stateEventId)
		{
			return new InOutStateCreated(stateEventId);			
		}

        private InOutStateMergePatched NewInOutStateMergePatched(InOutEventId stateEventId)
		{
			return new InOutStateMergePatched(stateEventId);
		}


		private InOutImageStateCreated NewInOutImageStateCreated(InOutImageEventId stateEventId)
		{
			return new InOutImageStateCreated(stateEventId);
		}

        private InOutImageStateMergePatched NewInOutImageStateMergePatched(InOutImageEventId stateEventId)
		{
			return new InOutImageStateMergePatched(stateEventId);
		}

        private InOutImageStateRemoved NewInOutImageStateRemoved(InOutImageEventId stateEventId)
		{
			return new InOutImageStateRemoved(stateEventId);
		}


		private InOutLineStateCreated NewInOutLineStateCreated(InOutLineEventId stateEventId)
		{
			return new InOutLineStateCreated(stateEventId);
		}

        private InOutLineStateMergePatched NewInOutLineStateMergePatched(InOutLineEventId stateEventId)
		{
			return new InOutLineStateMergePatched(stateEventId);
		}

        private InOutLineStateRemoved NewInOutLineStateRemoved(InOutLineEventId stateEventId)
		{
			return new InOutLineStateRemoved(stateEventId);
		}


		private InOutLineImageStateCreated NewInOutLineImageStateCreated(InOutLineImageEventId stateEventId)
		{
			return new InOutLineImageStateCreated(stateEventId);
		}

        private InOutLineImageStateMergePatched NewInOutLineImageStateMergePatched(InOutLineImageEventId stateEventId)
		{
			return new InOutLineImageStateMergePatched(stateEventId);
		}

        private InOutLineImageStateRemoved NewInOutLineImageStateRemoved(InOutLineImageEventId stateEventId)
		{
			return new InOutLineImageStateRemoved(stateEventId);
		}

        protected void NewInOutDocumentActionCommandAndExecute(ICreateInOut c, IInOutState s, IInOutStateCreated e)
        {
            var pCommandHandler = this.InOutDocumentActionCommandHandler;
            var pCmdContent = default(string);
            var pCmd = new PropertyCommand<string, string> { Content = pCmdContent, GetState = () => s.DocumentStatusId, SetState = p => e.DocumentStatusId = p, OuterCommandType = CommandType.Create };
            pCmd.Context = this.State;
            pCommandHandler.Execute(pCmd);
        }

        public class SimpleInOutDocumentActionCommandHandler : IPropertyCommandHandler<string, string>
        {
            public virtual void Execute(IPropertyCommand<string, string> command)
            {
                if (null == command.GetState() && null == command.Content)
                {
                    command.SetState("Drafted");
                    return;
                }
                if ("Drafted" == command.GetState() && "Complete" == command.Content)
                {
                    command.SetState("Completed");
                    return;
                }
                if ("Drafted" == command.GetState() && "Void" == command.Content)
                {
                    command.SetState("Voided");
                    return;
                }
                if ("Completed" == command.GetState() && "Close" == command.Content)
                {
                    command.SetState("Closed");
                    return;
                }
                if ("Completed" == command.GetState() && "Reverse" == command.Content)
                {
                    command.SetState("Reversed");
                    return;
                }
                throw new ArgumentException(String.Format("State: {0}, command: {1}", command.GetState, command.Content));
            }
        }

        private IPropertyCommandHandler<string, string> _inOutDocumentActionCommandHandler = new SimpleInOutDocumentActionCommandHandler();

        protected IPropertyCommandHandler<string, string> InOutDocumentActionCommandHandler
        {
            get
            {
                var h = ApplicationContext.Current["InOutDocumentActionCommandHandler"] as IPropertyCommandHandler<string, string>;
                if (h != null)
                { return h; }
                return this._inOutDocumentActionCommandHandler;
            }
            set
            {
                this._inOutDocumentActionCommandHandler = value;
            }
        }

        protected virtual void DoDocumentAction(string value, Action<string> setDocumentStatusId)
        {
            var pCommandHandler = this.InOutDocumentActionCommandHandler;
            var pCmdContent = value;
            var pCmd = new PropertyCommand<string, string> { Content = pCmdContent, GetState = () => this.State.DocumentStatusId, SetState = setDocumentStatusId, OuterCommandType = "DocumentAction" };
            pCmd.Context = this.State;
            pCommandHandler.Execute(pCmd);
        }

    }

}

