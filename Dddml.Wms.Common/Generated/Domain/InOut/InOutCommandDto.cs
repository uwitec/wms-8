// <autogenerated>
//   This file was generated by T4 code generator GenerateInOutDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InOut;

namespace Dddml.Wms.Domain.InOut
{

	public abstract class InOutCommandDtoBase : ICommandDto, ICreateInOut, IMergePatchInOut, IDeleteInOut
	{

		string IAggregateCommand<string, long>.AggregateId
		{
			get
			{
				return ((ICreateOrMergePatchOrDeleteInOut)this).DocumentNumber;
			}
		}


		long IAggregateCommand<string, long>.AggregateVersion
		{
			get
			{
				return this.Version != null ? this.Version.Value : default(long);
			}
		}

        long IInOutCommand.Version
        {
            get { return this.Version != null ? this.Version.Value : default(long); }
            set { this.Version = value; }
        }

		public virtual long? Version { get; set; }

		public virtual string RequesterId { get; set; }

		public virtual string CommandId { get; set; }

        object ICommand.RequesterId
        {
            get { return this.RequesterId; }
            set { this.RequesterId = (string)value; }
        }

        string ICommand.CommandId
        {
            get { return this.CommandId; }
            set { this.CommandId = value; }
        }

		public virtual string DocumentNumber { get; set; }

		public virtual bool? Posted { get; set; }

		public virtual bool? Processed { get; set; }

		public virtual string Processing { get; set; }

		public virtual string DocumentTypeId { get; set; }

		public virtual string Description { get; set; }

		public virtual string OrderId { get; set; }

		public virtual DateTime? DateOrdered { get; set; }

		public virtual bool? IsPrinted { get; set; }

		public virtual string MovementTypeId { get; set; }

		public virtual DateTime? MovementDate { get; set; }

		public virtual string BusinessPartnerId { get; set; }

		public virtual string WarehouseId { get; set; }

		public virtual string POReference { get; set; }

		public virtual decimal? FreightAmount { get; set; }

		public virtual string ShipperId { get; set; }

		public virtual decimal? ChargeAmount { get; set; }

		public virtual DateTime? DatePrinted { get; set; }

		public virtual string CreatedFrom { get; set; }

		public virtual string SalesRepresentativeId { get; set; }

		public virtual int? NumberOfPackages { get; set; }

		public virtual DateTime? PickDate { get; set; }

		public virtual DateTime? ShipDate { get; set; }

		public virtual string TrackingNumber { get; set; }

		public virtual DateTime? DateReceived { get; set; }

		public virtual bool? IsInTransit { get; set; }

		public virtual bool? IsApproved { get; set; }

		public virtual bool? IsInDispute { get; set; }

		public virtual string RmaDocumentNumber { get; set; }

		public virtual string ReversalDocumentNumber { get; set; }

		public virtual bool? Active { get; set; }

		public virtual bool? IsPropertyPostedRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyPostedRemoved
        {
            get
            {
                var b = this.IsPropertyPostedRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyPostedRemoved = value;
            }
        }

		public virtual bool? IsPropertyProcessedRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyProcessedRemoved
        {
            get
            {
                var b = this.IsPropertyProcessedRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyProcessedRemoved = value;
            }
        }

		public virtual bool? IsPropertyProcessingRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyProcessingRemoved
        {
            get
            {
                var b = this.IsPropertyProcessingRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyProcessingRemoved = value;
            }
        }

		public virtual bool? IsPropertyDocumentTypeIdRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyDocumentTypeIdRemoved
        {
            get
            {
                var b = this.IsPropertyDocumentTypeIdRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyDocumentTypeIdRemoved = value;
            }
        }

		public virtual bool? IsPropertyDescriptionRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyDescriptionRemoved
        {
            get
            {
                var b = this.IsPropertyDescriptionRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyDescriptionRemoved = value;
            }
        }

		public virtual bool? IsPropertyOrderIdRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyOrderIdRemoved
        {
            get
            {
                var b = this.IsPropertyOrderIdRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyOrderIdRemoved = value;
            }
        }

		public virtual bool? IsPropertyDateOrderedRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyDateOrderedRemoved
        {
            get
            {
                var b = this.IsPropertyDateOrderedRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyDateOrderedRemoved = value;
            }
        }

		public virtual bool? IsPropertyIsPrintedRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyIsPrintedRemoved
        {
            get
            {
                var b = this.IsPropertyIsPrintedRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyIsPrintedRemoved = value;
            }
        }

		public virtual bool? IsPropertyMovementTypeIdRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyMovementTypeIdRemoved
        {
            get
            {
                var b = this.IsPropertyMovementTypeIdRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyMovementTypeIdRemoved = value;
            }
        }

		public virtual bool? IsPropertyMovementDateRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyMovementDateRemoved
        {
            get
            {
                var b = this.IsPropertyMovementDateRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyMovementDateRemoved = value;
            }
        }

		public virtual bool? IsPropertyBusinessPartnerIdRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyBusinessPartnerIdRemoved
        {
            get
            {
                var b = this.IsPropertyBusinessPartnerIdRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyBusinessPartnerIdRemoved = value;
            }
        }

		public virtual bool? IsPropertyWarehouseIdRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyWarehouseIdRemoved
        {
            get
            {
                var b = this.IsPropertyWarehouseIdRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyWarehouseIdRemoved = value;
            }
        }

		public virtual bool? IsPropertyPOReferenceRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyPOReferenceRemoved
        {
            get
            {
                var b = this.IsPropertyPOReferenceRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyPOReferenceRemoved = value;
            }
        }

		public virtual bool? IsPropertyFreightAmountRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyFreightAmountRemoved
        {
            get
            {
                var b = this.IsPropertyFreightAmountRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyFreightAmountRemoved = value;
            }
        }

		public virtual bool? IsPropertyShipperIdRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyShipperIdRemoved
        {
            get
            {
                var b = this.IsPropertyShipperIdRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyShipperIdRemoved = value;
            }
        }

		public virtual bool? IsPropertyChargeAmountRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyChargeAmountRemoved
        {
            get
            {
                var b = this.IsPropertyChargeAmountRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyChargeAmountRemoved = value;
            }
        }

		public virtual bool? IsPropertyDatePrintedRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyDatePrintedRemoved
        {
            get
            {
                var b = this.IsPropertyDatePrintedRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyDatePrintedRemoved = value;
            }
        }

		public virtual bool? IsPropertyCreatedFromRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyCreatedFromRemoved
        {
            get
            {
                var b = this.IsPropertyCreatedFromRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyCreatedFromRemoved = value;
            }
        }

		public virtual bool? IsPropertySalesRepresentativeIdRemoved { get; set; }

        bool IMergePatchInOut.IsPropertySalesRepresentativeIdRemoved
        {
            get
            {
                var b = this.IsPropertySalesRepresentativeIdRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertySalesRepresentativeIdRemoved = value;
            }
        }

		public virtual bool? IsPropertyNumberOfPackagesRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyNumberOfPackagesRemoved
        {
            get
            {
                var b = this.IsPropertyNumberOfPackagesRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyNumberOfPackagesRemoved = value;
            }
        }

		public virtual bool? IsPropertyPickDateRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyPickDateRemoved
        {
            get
            {
                var b = this.IsPropertyPickDateRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyPickDateRemoved = value;
            }
        }

		public virtual bool? IsPropertyShipDateRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyShipDateRemoved
        {
            get
            {
                var b = this.IsPropertyShipDateRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyShipDateRemoved = value;
            }
        }

		public virtual bool? IsPropertyTrackingNumberRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyTrackingNumberRemoved
        {
            get
            {
                var b = this.IsPropertyTrackingNumberRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyTrackingNumberRemoved = value;
            }
        }

		public virtual bool? IsPropertyDateReceivedRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyDateReceivedRemoved
        {
            get
            {
                var b = this.IsPropertyDateReceivedRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyDateReceivedRemoved = value;
            }
        }

		public virtual bool? IsPropertyIsInTransitRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyIsInTransitRemoved
        {
            get
            {
                var b = this.IsPropertyIsInTransitRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyIsInTransitRemoved = value;
            }
        }

		public virtual bool? IsPropertyIsApprovedRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyIsApprovedRemoved
        {
            get
            {
                var b = this.IsPropertyIsApprovedRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyIsApprovedRemoved = value;
            }
        }

		public virtual bool? IsPropertyIsInDisputeRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyIsInDisputeRemoved
        {
            get
            {
                var b = this.IsPropertyIsInDisputeRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyIsInDisputeRemoved = value;
            }
        }

		public virtual bool? IsPropertyRmaDocumentNumberRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyRmaDocumentNumberRemoved
        {
            get
            {
                var b = this.IsPropertyRmaDocumentNumberRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyRmaDocumentNumberRemoved = value;
            }
        }

		public virtual bool? IsPropertyReversalDocumentNumberRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyReversalDocumentNumberRemoved
        {
            get
            {
                var b = this.IsPropertyReversalDocumentNumberRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyReversalDocumentNumberRemoved = value;
            }
        }

		public virtual bool? IsPropertyActiveRemoved { get; set; }

        bool IMergePatchInOut.IsPropertyActiveRemoved
        {
            get
            {
                var b = this.IsPropertyActiveRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyActiveRemoved = value;
            }
        }

        ICreateInOutImageCommands ICreateInOut.InOutImages
        {
            get
            {
                return this._inOutImages;
            }
        }

        IInOutImageCommands IMergePatchInOut.InOutImageCommands
        {
            get
            {
                return this._inOutImages;
            }
        }

        public virtual CreateInOutImageDto NewCreateInOutImage()
        {
            var c = new CreateInOutImageDto();
            c.InOutDocumentNumber = this.DocumentNumber;

            return c;
        }

        ICreateInOutImage ICreateInOut.NewCreateInOutImage()
        {
            return this.NewCreateInOutImage();
        }

        ICreateInOutImage IMergePatchInOut.NewCreateInOutImage()
        {
            return this.NewCreateInOutImage();
        }

        public virtual MergePatchInOutImageDto NewMergePatchInOutImage()
        {
            var c = new MergePatchInOutImageDto();
            c.InOutDocumentNumber = this.DocumentNumber;

            return c;
        }

        IMergePatchInOutImage IMergePatchInOut.NewMergePatchInOutImage()
        {
            return this.NewMergePatchInOutImage();
        }

        public virtual RemoveInOutImageDto NewRemoveInOutImage()
        {
            var c = new RemoveInOutImageDto();
            c.InOutDocumentNumber = this.DocumentNumber;

            return c;
        }

        IRemoveInOutImage IMergePatchInOut.NewRemoveInOutImage()
        {
            return this.NewRemoveInOutImage();
        }

        private CreateOrMergePatchOrRemoveInOutImageDtos _inOutImages = new CreateOrMergePatchOrRemoveInOutImageDtos();

        public virtual CreateOrMergePatchOrRemoveInOutImageDto[] InOutImages
        {
            get
            {
                return _inOutImages.ToArray();
            }
            set
            {
                _inOutImages.Clear();
                _inOutImages.AddRange(value);
            }
        }

        ICreateInOutLineCommands ICreateInOut.InOutLines
        {
            get
            {
                return this._inOutLines;
            }
        }

        IInOutLineCommands IMergePatchInOut.InOutLineCommands
        {
            get
            {
                return this._inOutLines;
            }
        }

        public virtual CreateInOutLineDto NewCreateInOutLine()
        {
            var c = new CreateInOutLineDto();
            c.InOutDocumentNumber = this.DocumentNumber;

            return c;
        }

        ICreateInOutLine ICreateInOut.NewCreateInOutLine()
        {
            return this.NewCreateInOutLine();
        }

        ICreateInOutLine IMergePatchInOut.NewCreateInOutLine()
        {
            return this.NewCreateInOutLine();
        }

        public virtual MergePatchInOutLineDto NewMergePatchInOutLine()
        {
            var c = new MergePatchInOutLineDto();
            c.InOutDocumentNumber = this.DocumentNumber;

            return c;
        }

        IMergePatchInOutLine IMergePatchInOut.NewMergePatchInOutLine()
        {
            return this.NewMergePatchInOutLine();
        }

        public virtual RemoveInOutLineDto NewRemoveInOutLine()
        {
            var c = new RemoveInOutLineDto();
            c.InOutDocumentNumber = this.DocumentNumber;

            return c;
        }

        IRemoveInOutLine IMergePatchInOut.NewRemoveInOutLine()
        {
            return this.NewRemoveInOutLine();
        }

        private CreateOrMergePatchOrRemoveInOutLineDtos _inOutLines = new CreateOrMergePatchOrRemoveInOutLineDtos();

        public virtual CreateOrMergePatchOrRemoveInOutLineDto[] InOutLines
        {
            get
            {
                return _inOutLines.ToArray();
            }
            set
            {
                _inOutLines.Clear();
                _inOutLines.AddRange(value);
            }
        }


        string ICommandDto.CommandType 
        {
            get { return this.GetCommandType(); }
        }

        protected abstract string GetCommandType();

	}


    public class CreateOrMergePatchOrDeleteInOutDto : InOutCommandDtoBase
    {
        private string _commandType;

        public virtual string CommandType
        {
            get { return _commandType; }
            set { _commandType = value; }
        }

        protected override string GetCommandType()
        {
            return this._commandType;
        }

    }



	public class CreateInOutDto : CreateOrMergePatchOrDeleteInOutDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Create;
        }

	}


	public class MergePatchInOutDto : CreateOrMergePatchOrDeleteInOutDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.MergePatch;
        }

	}

	public class DeleteInOutDto : CreateOrMergePatchOrDeleteInOutDto
	{
        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Delete;
        }


        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

	}

    public static partial class InOutCommandDtos
    {

        public class CompleteRequestContent : ICommandDto
        {

            public string CommandType
            {
                get { return "Complete"; }
            }

            public string DocumentNumber { get; set; }

            public long Version { get; set; }

            public string CommandId { get; set; }

            public string RequesterId { get; set; }

            public InOutCommands.Complete ToComplete()
            {
                var cmd = new InOutCommands.Complete();
                cmd.DocumentNumber = this.DocumentNumber;
                cmd.Version = this.Version;
                cmd.CommandId = this.CommandId;
                cmd.RequesterId = this.RequesterId;
                return cmd;
            }

        }

        public class CloseRequestContent : ICommandDto
        {

            public string CommandType
            {
                get { return "Close"; }
            }

            public string DocumentNumber { get; set; }

            public long Version { get; set; }

            public string CommandId { get; set; }

            public string RequesterId { get; set; }

            public InOutCommands.Close ToClose()
            {
                var cmd = new InOutCommands.Close();
                cmd.DocumentNumber = this.DocumentNumber;
                cmd.Version = this.Version;
                cmd.CommandId = this.CommandId;
                cmd.RequesterId = this.RequesterId;
                return cmd;
            }

        }

        public class VoidRequestContent : ICommandDto
        {

            public string CommandType
            {
                get { return "Void"; }
            }

            public string DocumentNumber { get; set; }

            public long Version { get; set; }

            public string CommandId { get; set; }

            public string RequesterId { get; set; }

            public InOutCommands.Void ToVoid()
            {
                var cmd = new InOutCommands.Void();
                cmd.DocumentNumber = this.DocumentNumber;
                cmd.Version = this.Version;
                cmd.CommandId = this.CommandId;
                cmd.RequesterId = this.RequesterId;
                return cmd;
            }

        }

        public class ReverseRequestContent : ICommandDto
        {

            public string CommandType
            {
                get { return "Reverse"; }
            }

            public string DocumentNumber { get; set; }

            public long Version { get; set; }

            public string CommandId { get; set; }

            public string RequesterId { get; set; }

            public InOutCommands.Reverse ToReverse()
            {
                var cmd = new InOutCommands.Reverse();
                cmd.DocumentNumber = this.DocumentNumber;
                cmd.Version = this.Version;
                cmd.CommandId = this.CommandId;
                cmd.RequesterId = this.RequesterId;
                return cmd;
            }

        }

        public class AddLineRequestContent : ICommandDto
        {

            public string CommandType
            {
                get { return "AddLine"; }
            }

            public string LineNumber { get; set; }

            public string LocatorId { get; set; }

            public string ProductId { get; set; }

            public IDictionary<string, object> AttributeSetInstance { get; set; }

            public string[] DamageStatusIds { get; set; }

            public string Description { get; set; }

            public string QuantityUomId { get; set; }

            public decimal MovementQuantity { get; set; }

            public string DocumentNumber { get; set; }

            public long Version { get; set; }

            public string CommandId { get; set; }

            public string RequesterId { get; set; }

            public InOutCommands.AddLine ToAddLine()
            {
                var cmd = new InOutCommands.AddLine();
                cmd.LineNumber = this.LineNumber;
                cmd.LocatorId = this.LocatorId;
                cmd.ProductId = this.ProductId;
                cmd.AttributeSetInstance = this.AttributeSetInstance;
                cmd.DamageStatusIds = this.DamageStatusIds == null ? null : new HashSet<string>(this.DamageStatusIds);
                cmd.Description = this.Description;
                cmd.QuantityUomId = this.QuantityUomId;
                cmd.MovementQuantity = this.MovementQuantity;
                cmd.DocumentNumber = this.DocumentNumber;
                cmd.Version = this.Version;
                cmd.CommandId = this.CommandId;
                cmd.RequesterId = this.RequesterId;
                return cmd;
            }

        }

        public class ImportRequestContent : ICommandDto
        {

            public string CommandType
            {
                get { return "Import"; }
            }

            public string DocumentTypeId { get; set; }

            public string Description { get; set; }

            public string OrderId { get; set; }

            public DateTime? DateOrdered { get; set; }

            public string MovementTypeId { get; set; }

            public DateTime? MovementDate { get; set; }

            public string WarehouseId { get; set; }

            public string POReference { get; set; }

            public string ShipperId { get; set; }

            public ImportingInOutLine[] InOutLines { get; set; }

            public string DocumentNumber { get; set; }

            public long Version { get; set; }

            public string CommandId { get; set; }

            public string RequesterId { get; set; }

            public InOutCommands.Import ToImport()
            {
                var cmd = new InOutCommands.Import();
                cmd.DocumentTypeId = this.DocumentTypeId;
                cmd.Description = this.Description;
                cmd.OrderId = this.OrderId;
                cmd.DateOrdered = this.DateOrdered;
                cmd.MovementTypeId = this.MovementTypeId;
                cmd.MovementDate = this.MovementDate;
                cmd.WarehouseId = this.WarehouseId;
                cmd.POReference = this.POReference;
                cmd.ShipperId = this.ShipperId;
                cmd.InOutLines = this.InOutLines == null ? null : new HashSet<ImportingInOutLine>(this.InOutLines);
                cmd.DocumentNumber = this.DocumentNumber;
                cmd.Version = this.Version;
                cmd.CommandId = this.CommandId;
                cmd.RequesterId = this.RequesterId;
                return cmd;
            }

        }

        public class DocumentActionRequestContent : ICommandDto
        {

            public string CommandType
            {
                get { return "DocumentAction"; }
            }

            public string Value { get; set; }

            public string DocumentNumber { get; set; }

            public long Version { get; set; }

            public string CommandId { get; set; }

            public string RequesterId { get; set; }

            public InOutCommands.DocumentAction ToDocumentAction()
            {
                var cmd = new InOutCommands.DocumentAction();
                cmd.Value = this.Value;
                cmd.DocumentNumber = this.DocumentNumber;
                cmd.Version = this.Version;
                cmd.CommandId = this.CommandId;
                cmd.RequesterId = this.RequesterId;
                return cmd;
            }

        }

    }

}

