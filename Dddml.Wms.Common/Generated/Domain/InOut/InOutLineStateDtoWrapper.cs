// <autogenerated>
//   This file was generated by T4 code generator GenerateInOutDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InOut;

namespace Dddml.Wms.Domain.InOut
{

	public partial class InOutLineStateDtoWrapper : StateDtoWrapperBase, IInOutLineStateDto, IInOutLineState
	{

        internal static IList<string> _collectionFieldNames = new string[] { "InOutLineImages" };

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(_collectionFieldNames, fieldName);
        }

		private IInOutLineState _state;

        public InOutLineStateDtoWrapper()
        {
            this._state = new InOutLineState();
        }

		public InOutLineStateDtoWrapper(IInOutLineState state)
		{
            this._state = state;
		}

		public IInOutLineState ToInOutLineState()
		{
			return this._state;
		}

		public virtual string LineNumber
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("LineNumber"))
                {
                    return _state.LineNumber;
                }
                return null;
            }
            set
            {
                _state.LineNumber = value;
            }
        }

        string IInOutLineStateProperties.LineNumber
        {
            get 
            {
                return (this._state as IInOutLineStateProperties).LineNumber;
            }
            set 
            {
                (this._state as IInOutLineStateProperties).LineNumber = value;
            }
        }

		public virtual string LocatorId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("LocatorId"))
                {
                    return _state.LocatorId;
                }
                return null;
            }
            set
            {
                _state.LocatorId = value;
            }
        }

        string IInOutLineStateProperties.LocatorId
        {
            get 
            {
                return (this._state as IInOutLineStateProperties).LocatorId;
            }
            set 
            {
                (this._state as IInOutLineStateProperties).LocatorId = value;
            }
        }

		public virtual string ProductId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("ProductId"))
                {
                    return _state.ProductId;
                }
                return null;
            }
            set
            {
                _state.ProductId = value;
            }
        }

        string IInOutLineStateProperties.ProductId
        {
            get 
            {
                return (this._state as IInOutLineStateProperties).ProductId;
            }
            set 
            {
                (this._state as IInOutLineStateProperties).ProductId = value;
            }
        }

		public virtual string AttributeSetInstanceId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("AttributeSetInstanceId"))
                {
                    return _state.AttributeSetInstanceId;
                }
                return null;
            }
            set
            {
                _state.AttributeSetInstanceId = value;
            }
        }

        string IInOutLineStateProperties.AttributeSetInstanceId
        {
            get 
            {
                return (this._state as IInOutLineStateProperties).AttributeSetInstanceId;
            }
            set 
            {
                (this._state as IInOutLineStateProperties).AttributeSetInstanceId = value;
            }
        }

		public virtual string Description
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Description"))
                {
                    return _state.Description;
                }
                return null;
            }
            set
            {
                _state.Description = value;
            }
        }

        string IInOutLineStateProperties.Description
        {
            get 
            {
                return (this._state as IInOutLineStateProperties).Description;
            }
            set 
            {
                (this._state as IInOutLineStateProperties).Description = value;
            }
        }

		public virtual string QuantityUomId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("QuantityUomId"))
                {
                    return _state.QuantityUomId;
                }
                return null;
            }
            set
            {
                _state.QuantityUomId = value;
            }
        }

        string IInOutLineStateProperties.QuantityUomId
        {
            get 
            {
                return (this._state as IInOutLineStateProperties).QuantityUomId;
            }
            set 
            {
                (this._state as IInOutLineStateProperties).QuantityUomId = value;
            }
        }

		public virtual decimal? MovementQuantity
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("MovementQuantity"))
                {
                    return _state.MovementQuantity;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.MovementQuantity = value.Value;
                }
            }
        }

        decimal IInOutLineStateProperties.MovementQuantity
        {
            get 
            {
                return (this._state as IInOutLineStateProperties).MovementQuantity;
            }
            set 
            {
                (this._state as IInOutLineStateProperties).MovementQuantity = value;
            }
        }

		public virtual decimal? PickedQuantity
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("PickedQuantity"))
                {
                    return _state.PickedQuantity;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.PickedQuantity = value.Value;
                }
            }
        }

        decimal IInOutLineStateProperties.PickedQuantity
        {
            get 
            {
                return (this._state as IInOutLineStateProperties).PickedQuantity;
            }
            set 
            {
                (this._state as IInOutLineStateProperties).PickedQuantity = value;
            }
        }

		public virtual bool? IsInvoiced
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("IsInvoiced"))
                {
                    return _state.IsInvoiced;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.IsInvoiced = value.Value;
                }
            }
        }

        bool IInOutLineStateProperties.IsInvoiced
        {
            get 
            {
                return (this._state as IInOutLineStateProperties).IsInvoiced;
            }
            set 
            {
                (this._state as IInOutLineStateProperties).IsInvoiced = value;
            }
        }

		public virtual bool? Processed
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Processed"))
                {
                    return _state.Processed;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.Processed = value.Value;
                }
            }
        }

        bool IInOutLineStateProperties.Processed
        {
            get 
            {
                return (this._state as IInOutLineStateProperties).Processed;
            }
            set 
            {
                (this._state as IInOutLineStateProperties).Processed = value;
            }
        }

		public virtual string RmaLineNumber
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("RmaLineNumber"))
                {
                    return _state.RmaLineNumber;
                }
                return null;
            }
            set
            {
                _state.RmaLineNumber = value;
            }
        }

        string IInOutLineStateProperties.RmaLineNumber
        {
            get 
            {
                return (this._state as IInOutLineStateProperties).RmaLineNumber;
            }
            set 
            {
                (this._state as IInOutLineStateProperties).RmaLineNumber = value;
            }
        }

		public virtual string ReversalLineNumber
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("ReversalLineNumber"))
                {
                    return _state.ReversalLineNumber;
                }
                return null;
            }
            set
            {
                _state.ReversalLineNumber = value;
            }
        }

        string IInOutLineStateProperties.ReversalLineNumber
        {
            get 
            {
                return (this._state as IInOutLineStateProperties).ReversalLineNumber;
            }
            set 
            {
                (this._state as IInOutLineStateProperties).ReversalLineNumber = value;
            }
        }

		public virtual bool? Active
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Active"))
                {
                    return (this._state as IInOutLineStateProperties).Active;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    (this._state as IInOutLineStateProperties).Active = value.Value;
                }
            }
        }

        bool IInOutLineStateProperties.Active
        {
            get 
            {
                return (this._state as IInOutLineStateProperties).Active;
            }
            set 
            {
                (this._state as IInOutLineStateProperties).Active = value;
            }
        }

		public virtual long? Version
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Version"))
                {
                    return (this._state as IInOutLineStateProperties).Version;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    (this._state as IInOutLineStateProperties).Version = value.Value;
                }
            }
        }

        long IInOutLineStateProperties.Version
        {
            get 
            {
                return (this._state as IInOutLineStateProperties).Version;
            }
            set 
            {
                (this._state as IInOutLineStateProperties).Version = value;
            }
        }

		public virtual string InOutDocumentNumber
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("InOutDocumentNumber"))
                {
                    return _state.InOutDocumentNumber;
                }
                return null;
            }
            set
            {
                _state.InOutDocumentNumber = value;
            }
        }

        string IInOutLineStateProperties.InOutDocumentNumber
        {
            get 
            {
                return (this._state as IInOutLineStateProperties).InOutDocumentNumber;
            }
            set 
            {
                (this._state as IInOutLineStateProperties).InOutDocumentNumber = value;
            }
        }

		public virtual string CreatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedBy"))
                {
                    return _state.CreatedBy;
                }
                return null;
            }
            set
            {
                _state.CreatedBy = value;
            }
        }

		public virtual DateTime? CreatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedAt"))
                {
                    return _state.CreatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.CreatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.CreatedAt = value.Value;
                }
            }
        }

		public virtual string UpdatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedBy"))
                {
                    return _state.UpdatedBy;
                }
                return null;
            }
            set
            {
                _state.UpdatedBy = value;
            }
        }

		public virtual DateTime? UpdatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedAt"))
                {
                    return _state.UpdatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.UpdatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.UpdatedAt = value.Value;
                }
            }
        }

		#region IIdentity implementation


		InOutLineId IGlobalIdentity<InOutLineId>.GlobalId {
			get { return (_state as IInOutLineState).GlobalId; }
		}

        string ILocalIdentity<string>.LocalId
        {
			get { return (_state as IInOutLineState).LocalId; }
        }

		#endregion

		#region IActive implementation

		bool IActive.IsActive()
		{
            return (_state as IActive).IsActive();
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
            get { return (_state as IDeleted).Deleted; }
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
            get { return (_state as IInOutLineState).CreatedBy; }
            set { (_state as IInOutLineState).CreatedBy = value; }
		}

		DateTime ICreated<string>.CreatedAt
		{
            get { return (_state as IInOutLineState).CreatedAt; }
            set { (_state as IInOutLineState).CreatedAt = value; }
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
            get { return (_state as IInOutLineState).UpdatedBy; }
            set { (_state as IInOutLineState).UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
            get { return (_state as IInOutLineState).UpdatedAt; }
            set { (_state as IInOutLineState).UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IEntityVersioned<long>.EntityVersion
		{
            get { return (_state as IInOutLineStateProperties).Version; }
		}

		#endregion

        bool IInOutLineState.IsUnsaved
        {
            get { return this.Version == InOutLineState.VersionZero; }
        }

        public virtual string[] DamageStatusIds
        {
            get 
            {
                if (!(this as IStateDtoWrapper).ReturnedFieldsContains("DamageStatusIds"))
                {
                    return null;
                }
                var dtos = new List<string>();
                if (this._state.DamageStatusIds != null)
                {
                    foreach (var s in this._state.DamageStatusIds)
                    {
                        var dto = s;
                        dtos.Add(dto);
                    }
                }
                return dtos.ToArray();
            }
            set 
            {
                if (value == null) { value = new string[0]; }
                var states = new HashSet<string>();
                foreach (var s in value)
                {
                    states.Add(s);
                }
                this._state.DamageStatusIds = states;
            }
        }

        ISet<string> IInOutLineStateProperties.DamageStatusIds 
        {
            get { return _state.DamageStatusIds; }
            set { _state.DamageStatusIds = value; }
        }

        public virtual IInOutLineImageStateDto[] InOutLineImages
        {
            get 
            {
                if (!(this as IStateDtoWrapper).ReturnedFieldsContains("InOutLineImages"))
                {
                    return null;
                }
                var dtos = new List<IInOutLineImageStateDto>();
                if (this._state.InOutLineImages != null)
                {
                    foreach (var s in this._state.InOutLineImages)
                    {
                        var dto = new InOutLineImageStateDtoWrapper((InOutLineImageState)s);
                        var returnFS = CollectionUtils.DictionaryGetValueIgnoringCase(ReturnedFields, "InOutLineImages");
                        if (!String.IsNullOrWhiteSpace(returnFS))
                        {
                            (dto as IStateDtoWrapper).ReturnedFieldsString = returnFS;
                        }
                        else
                        {
                            (dto as IStateDtoWrapper).AllFieldsReturned = this.AllFieldsReturned;
                        }
                        dtos.Add(dto);
                    }
                }
                return dtos.ToArray();
            }
            set 
            {
                if (value == null) { value = new InOutLineImageStateDtoWrapper[0]; }
                var states = new List<IInOutLineImageState>();
                foreach (var s in value)
                {
                    states.Add(s.ToInOutLineImageState());
                }
                this._state.InOutLineImages = new DtoInOutLineImageStates(this._state, states);
            }
        }

        IInOutLineImageStates IInOutLineState.InOutLineImages
        {
            get { return _state.InOutLineImages; }
            set { _state.InOutLineImages = value; }
        }

		void IInOutLineState.When(IInOutLineStateCreated e)
		{
            throw new NotSupportedException();
		}

		bool IInOutLineState.ForReapplying
		{
            get { throw new NotSupportedException(); }
		}

        public bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }

		void IInOutLineState.When(IInOutLineStateMergePatched e)
		{
            throw new NotSupportedException();
		}

		void IInOutLineState.When(IInOutLineStateRemoved e)
		{
            throw new NotSupportedException();
		}

		void IInOutLineState.Mutate(IEvent e)
		{
            throw new NotSupportedException();
		}

        // //////////////////////////////////////////////////////////////

        public class DtoInOutLineImageStates : IInOutLineImageStates
        {

            private IInOutLineState _outerState;

            private IEnumerable<IInOutLineImageState> _innerStates;

            public DtoInOutLineImageStates(IInOutLineState outerState, IEnumerable<IInOutLineImageState> innerStates)
            {
                this._outerState = outerState;
                if (innerStates == null)
                {
                    this._innerStates = new IInOutLineImageState[] { };
                }
                else
                {
                    this._innerStates = innerStates;
                }
            }

            public IEnumerator<IInOutLineImageState> GetEnumerator()
            {
                return _innerStates.GetEnumerator();
            }

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
            {
                return _innerStates.GetEnumerator();
            }

            public IInOutLineImageState Get(string sequenceId)
            {
                throw new NotSupportedException();
            }

            public IInOutLineImageState Get(string sequenceId, bool forCreation)
            {
                throw new NotSupportedException();
            }

            public IInOutLineImageState Get(string sequenceId, bool forCreation, bool nullAllowed)
            {
                throw new NotSupportedException();
            }

            public void Remove(IInOutLineImageState state)
            {
                throw new NotSupportedException();
            }

            public void AddToSave(IInOutLineImageState state)
            {
                throw new NotSupportedException();
            }

            public void Save()
            {
                throw new NotSupportedException();
            }
        }

	}

    partial class InOutLineStateDtoWrapperCollection : StateDtoWrapperCollectionBase<InOutLineStateDtoWrapper>
    {

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(InOutLineStateDtoWrapper._collectionFieldNames, fieldName);
        }

    }

}

