// <autogenerated>
//   This file was generated by T4 code generator GenerateInOutDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InOut;

namespace Dddml.Wms.Domain.InOut
{

    public class InOutImageStates : IInOutImageStates
    {
        
		protected IInOutImageStateDao InOutImageStateDao
		{
			get
			{
				return ApplicationContext.Current["InOutImageStateDao"] as IInOutImageStateDao;
			}
		}

		private Dictionary<InOutImageId, IInOutImageState> _loadedInOutImageStates = new Dictionary<InOutImageId, IInOutImageState>();

		private Dictionary<InOutImageId, IInOutImageState> _removedInOutImageStates = new Dictionary<InOutImageId, IInOutImageState>();

		protected virtual IEnumerable<IInOutImageState> LoadedInOutImageStates {
			get {
				return this._loadedInOutImageStates.Values;
			}
		}

        private IInOutState _inOutState;

        private IEnumerable<IInOutImageState> InnerEnumeralbe
        {
            get
            {
                if (!ForReapplying)
                {
                    return InOutImageStateDao.FindByInOutDocumentNumber(_inOutState.DocumentNumber);
                }
                else
                {
                    return _loadedInOutImageStates.Values.Where(s => !(_removedInOutImageStates.ContainsKey(s.GlobalId) && s.Deleted));
                }
            }
        }

        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public InOutImageStates(IInOutState outerState)
        {
            this._inOutState = outerState;
            this._forReapplying = outerState.ForReapplying;
        }

        public IEnumerator<IInOutImageState> GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        public virtual void Remove(IInOutImageState state)
        {
            this._removedInOutImageStates.Add(state.GlobalId, state);
        }

        public virtual IInOutImageState Get(string sequenceId)
		{
			return Get(sequenceId, false, false);
		}

        public virtual IInOutImageState Get(string sequenceId, bool forCreation)
        {
			return Get(sequenceId, forCreation, false);
        }

        public virtual IInOutImageState Get(string sequenceId, bool forCreation, bool nullAllowed)
        {
            InOutImageId globalId = new InOutImageId(_inOutState.DocumentNumber, sequenceId);
            if (_loadedInOutImageStates.ContainsKey(globalId)) {
                var state = _loadedInOutImageStates[globalId];
                if (this._inOutState != null && this._inOutState.ReadOnly == false) { ((IInOutImageState)state).ReadOnly = false; }
                return state;
            }
            if (forCreation || ForReapplying)
            {
                var state = new InOutImageState(ForReapplying);
                state.InOutImageId = globalId;
                _loadedInOutImageStates.Add(globalId, state);
                if (this._inOutState != null && this._inOutState.ReadOnly == false) { ((IInOutImageState)state).ReadOnly = false; }
                return state;
            }
            else
            {
                var state = InOutImageStateDao.Get(globalId, nullAllowed);
                if (state != null)
                {
                    _loadedInOutImageStates.Add(globalId, state);
                }
                if (this._inOutState != null && this._inOutState.ReadOnly == false) { ((IInOutImageState)state).ReadOnly = false; }
                return state;
            }
        }

        public virtual void AddToSave(IInOutImageState state)
        {
            this._loadedInOutImageStates[state.GlobalId] = state;
        }

		#region Saveable Implements

		public virtual void Save ()
		{
			foreach (IInOutImageState s in this.LoadedInOutImageStates) {
                InOutImageStateDao.Save(s);
			}
            foreach(IInOutImageState s in this._removedInOutImageStates.Values)
            {
                InOutImageStateDao.Delete(s);
            }
		}

		#endregion


    }



}


