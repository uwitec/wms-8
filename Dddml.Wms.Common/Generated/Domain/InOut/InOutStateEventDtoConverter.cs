// <autogenerated>
//   This file was generated by T4 code generator GenerateInOutDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InOut;

namespace Dddml.Wms.Domain.InOut
{

    public class InOutStateEventDtoConverter
    {
        public virtual InOutStateCreatedOrMergePatchedOrDeletedDto ToInOutStateEventDto(IInOutEvent stateEvent)
        {
            if (stateEvent.EventType == StateEventType.Created)
            {
                var e = (IInOutStateCreated)stateEvent;
                return ToInOutStateCreatedDto(e);
            }
            else if (stateEvent.EventType == StateEventType.MergePatched)
            {
                var e = (IInOutStateMergePatched)stateEvent;
                return ToInOutStateMergePatchedDto(e);
            }
            throw DomainError.Named("invalidEventType", String.Format("Invalid state event type: {0}", stateEvent.EventType));
        }

        public virtual InOutStateCreatedDto ToInOutStateCreatedDto(IInOutStateCreated e)
        {
            var dto = new InOutStateCreatedDto();
            dto.InOutEventId = e.InOutEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.DocumentStatusId = e.DocumentStatusId;
            dto.Posted = e.Posted;
            dto.Processed = e.Processed;
            dto.Processing = e.Processing;
            dto.DocumentTypeId = e.DocumentTypeId;
            dto.Description = e.Description;
            dto.OrderId = e.OrderId;
            dto.DateOrdered = e.DateOrdered;
            dto.IsPrinted = e.IsPrinted;
            dto.MovementTypeId = e.MovementTypeId;
            dto.MovementDate = e.MovementDate;
            dto.BusinessPartnerId = e.BusinessPartnerId;
            dto.WarehouseId = e.WarehouseId;
            dto.POReference = e.POReference;
            dto.FreightAmount = e.FreightAmount;
            dto.ShipperId = e.ShipperId;
            dto.ChargeAmount = e.ChargeAmount;
            dto.DatePrinted = e.DatePrinted;
            dto.CreatedFrom = e.CreatedFrom;
            dto.SalesRepresentativeId = e.SalesRepresentativeId;
            dto.NumberOfPackages = e.NumberOfPackages;
            dto.PickDate = e.PickDate;
            dto.ShipDate = e.ShipDate;
            dto.TrackingNumber = e.TrackingNumber;
            dto.DateReceived = e.DateReceived;
            dto.IsInTransit = e.IsInTransit;
            dto.IsApproved = e.IsApproved;
            dto.IsInDispute = e.IsInDispute;
            dto.RmaDocumentNumber = e.RmaDocumentNumber;
            dto.ReversalDocumentNumber = e.ReversalDocumentNumber;
            dto.Active = e.Active;
            var inOutImageEvents = new List<InOutImageStateCreatedDto>();
            foreach (var ee in e.InOutImageEvents)
            {
                InOutImageStateCreatedDto eeDto = InOutImageStateEventDtoConverter.ToInOutImageStateCreatedDto(ee);
                inOutImageEvents.Add(eeDto);
            }
            dto.InOutImageEvents = inOutImageEvents.ToArray();

            var inOutLineEvents = new List<InOutLineStateCreatedDto>();
            foreach (var ee in e.InOutLineEvents)
            {
                InOutLineStateCreatedDto eeDto = InOutLineStateEventDtoConverter.ToInOutLineStateCreatedDto(ee);
                inOutLineEvents.Add(eeDto);
            }
            dto.InOutLineEvents = inOutLineEvents.ToArray();

            return dto;
        }

        public virtual InOutStateMergePatchedDto ToInOutStateMergePatchedDto(IInOutStateMergePatched e)
        {
            var dto = new InOutStateMergePatchedDto();
            dto.InOutEventId = e.InOutEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.DocumentStatusId = e.DocumentStatusId;
            dto.Posted = e.Posted;
            dto.Processed = e.Processed;
            dto.Processing = e.Processing;
            dto.DocumentTypeId = e.DocumentTypeId;
            dto.Description = e.Description;
            dto.OrderId = e.OrderId;
            dto.DateOrdered = e.DateOrdered;
            dto.IsPrinted = e.IsPrinted;
            dto.MovementTypeId = e.MovementTypeId;
            dto.MovementDate = e.MovementDate;
            dto.BusinessPartnerId = e.BusinessPartnerId;
            dto.WarehouseId = e.WarehouseId;
            dto.POReference = e.POReference;
            dto.FreightAmount = e.FreightAmount;
            dto.ShipperId = e.ShipperId;
            dto.ChargeAmount = e.ChargeAmount;
            dto.DatePrinted = e.DatePrinted;
            dto.CreatedFrom = e.CreatedFrom;
            dto.SalesRepresentativeId = e.SalesRepresentativeId;
            dto.NumberOfPackages = e.NumberOfPackages;
            dto.PickDate = e.PickDate;
            dto.ShipDate = e.ShipDate;
            dto.TrackingNumber = e.TrackingNumber;
            dto.DateReceived = e.DateReceived;
            dto.IsInTransit = e.IsInTransit;
            dto.IsApproved = e.IsApproved;
            dto.IsInDispute = e.IsInDispute;
            dto.RmaDocumentNumber = e.RmaDocumentNumber;
            dto.ReversalDocumentNumber = e.ReversalDocumentNumber;
            dto.Active = e.Active;
            dto.IsPropertyDocumentStatusIdRemoved = e.IsPropertyDocumentStatusIdRemoved;
            dto.IsPropertyPostedRemoved = e.IsPropertyPostedRemoved;
            dto.IsPropertyProcessedRemoved = e.IsPropertyProcessedRemoved;
            dto.IsPropertyProcessingRemoved = e.IsPropertyProcessingRemoved;
            dto.IsPropertyDocumentTypeIdRemoved = e.IsPropertyDocumentTypeIdRemoved;
            dto.IsPropertyDescriptionRemoved = e.IsPropertyDescriptionRemoved;
            dto.IsPropertyOrderIdRemoved = e.IsPropertyOrderIdRemoved;
            dto.IsPropertyDateOrderedRemoved = e.IsPropertyDateOrderedRemoved;
            dto.IsPropertyIsPrintedRemoved = e.IsPropertyIsPrintedRemoved;
            dto.IsPropertyMovementTypeIdRemoved = e.IsPropertyMovementTypeIdRemoved;
            dto.IsPropertyMovementDateRemoved = e.IsPropertyMovementDateRemoved;
            dto.IsPropertyBusinessPartnerIdRemoved = e.IsPropertyBusinessPartnerIdRemoved;
            dto.IsPropertyWarehouseIdRemoved = e.IsPropertyWarehouseIdRemoved;
            dto.IsPropertyPOReferenceRemoved = e.IsPropertyPOReferenceRemoved;
            dto.IsPropertyFreightAmountRemoved = e.IsPropertyFreightAmountRemoved;
            dto.IsPropertyShipperIdRemoved = e.IsPropertyShipperIdRemoved;
            dto.IsPropertyChargeAmountRemoved = e.IsPropertyChargeAmountRemoved;
            dto.IsPropertyDatePrintedRemoved = e.IsPropertyDatePrintedRemoved;
            dto.IsPropertyCreatedFromRemoved = e.IsPropertyCreatedFromRemoved;
            dto.IsPropertySalesRepresentativeIdRemoved = e.IsPropertySalesRepresentativeIdRemoved;
            dto.IsPropertyNumberOfPackagesRemoved = e.IsPropertyNumberOfPackagesRemoved;
            dto.IsPropertyPickDateRemoved = e.IsPropertyPickDateRemoved;
            dto.IsPropertyShipDateRemoved = e.IsPropertyShipDateRemoved;
            dto.IsPropertyTrackingNumberRemoved = e.IsPropertyTrackingNumberRemoved;
            dto.IsPropertyDateReceivedRemoved = e.IsPropertyDateReceivedRemoved;
            dto.IsPropertyIsInTransitRemoved = e.IsPropertyIsInTransitRemoved;
            dto.IsPropertyIsApprovedRemoved = e.IsPropertyIsApprovedRemoved;
            dto.IsPropertyIsInDisputeRemoved = e.IsPropertyIsInDisputeRemoved;
            dto.IsPropertyRmaDocumentNumberRemoved = e.IsPropertyRmaDocumentNumberRemoved;
            dto.IsPropertyReversalDocumentNumberRemoved = e.IsPropertyReversalDocumentNumberRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;
            var inOutImageEvents = new List<InOutImageStateCreatedOrMergePatchedOrRemovedDto>();
            foreach (var ee in e.InOutImageEvents)
            {
                InOutImageStateCreatedOrMergePatchedOrRemovedDto eeDto = InOutImageStateEventDtoConverter.ToInOutImageStateEventDto(ee);
                inOutImageEvents.Add(eeDto);
            }
            dto.InOutImageEvents = inOutImageEvents.ToArray();

            var inOutLineEvents = new List<InOutLineStateCreatedOrMergePatchedOrRemovedDto>();
            foreach (var ee in e.InOutLineEvents)
            {
                InOutLineStateCreatedOrMergePatchedOrRemovedDto eeDto = InOutLineStateEventDtoConverter.ToInOutLineStateEventDto(ee);
                inOutLineEvents.Add(eeDto);
            }
            dto.InOutLineEvents = inOutLineEvents.ToArray();


            return dto;
        }


        protected virtual InOutImageStateEventDtoConverter InOutImageStateEventDtoConverter
        {
            get
            {
                return new InOutImageStateEventDtoConverter();
            }
        }

        protected virtual InOutLineStateEventDtoConverter InOutLineStateEventDtoConverter
        {
            get
            {
                return new InOutLineStateEventDtoConverter();
            }
        }


    }


}

