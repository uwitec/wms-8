// <autogenerated>
//   This file was generated by T4 code generator GenerateInOutDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InOut;

namespace Dddml.Wms.Domain.InOut
{

	public static partial class InOutImageStateInterfaceExtension
	{

        public static IInOutImageCommand ToCreateOrMergePatchInOutImage<TCreateInOutImage, TMergePatchInOutImage>(this IInOutImageState state)
            where TCreateInOutImage : ICreateInOutImage, new()
            where TMergePatchInOutImage : IMergePatchInOutImage, new()
        {
            bool bUnsaved = ((IInOutImageState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateInOutImage<TCreateInOutImage>();
            }
            else 
            {
                return state.ToMergePatchInOutImage<TMergePatchInOutImage>();
            }
        }

        public static TRemoveInOutImage ToRemoveInOutImage<TRemoveInOutImage>(this IInOutImageState state)
            where TRemoveInOutImage : IRemoveInOutImage, new()
        {
            var cmd = new TRemoveInOutImage();
            cmd.SequenceId = state.SequenceId;
            return cmd;
        }

        public static TMergePatchInOutImage ToMergePatchInOutImage<TMergePatchInOutImage>(this IInOutImageState state)
            where TMergePatchInOutImage : IMergePatchInOutImage, new()
        {
            var cmd = new TMergePatchInOutImage();

            cmd.SequenceId = state.SequenceId;
            cmd.Url = state.Url;
            cmd.Active = ((IInOutImageStateProperties)state).Active;
            cmd.InOutDocumentNumber = state.InOutDocumentNumber;
            
            if (state.Url == null) { cmd.IsPropertyUrlRemoved = true; }
            return cmd;
        }

        public static TCreateInOutImage ToCreateInOutImage<TCreateInOutImage>(this IInOutImageState state)
            where TCreateInOutImage : ICreateInOutImage, new()
        {
            var cmd = new TCreateInOutImage();

            cmd.SequenceId = state.SequenceId;
            cmd.Url = state.Url;
            cmd.Active = ((IInOutImageStateProperties)state).Active;
            cmd.InOutDocumentNumber = state.InOutDocumentNumber;
            return cmd;
        }
		

	}

}

