// <autogenerated>
//   This file was generated by T4 code generator GenerateInOutDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InOut;

namespace Dddml.Wms.Domain.InOut
{

	public abstract class InOutEventBase : IInOutEvent
	{

		public virtual InOutEventId InOutEventId { get; set; }

        public virtual string DocumentNumber
        {
            get { return InOutEventId.DocumentNumber; }
            set { InOutEventId.DocumentNumber = value; }
        }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		InOutEventId IGlobalIdentity<InOutEventId>.GlobalId {
			get
			{
				return this.InOutEventId;
			}
		}

        public virtual bool EventReadOnly { get; set; }

        bool IInOutEvent.ReadOnly
        {
            get
            {
                return this.EventReadOnly;
            }
            set
            {
                this.EventReadOnly = value;
            }
        }


		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}

        protected InOutEventBase()
        {
        }

        protected InOutEventBase(InOutEventId stateEventId)
        {
            this.InOutEventId = stateEventId;
        }

		protected IInOutImageEventDao InOutImageEventDao
		{
			get { return ApplicationContext.Current["InOutImageEventDao"] as IInOutImageEventDao; }
		}

        protected InOutImageEventId NewInOutImageEventId(string sequenceId)
        {
            var stateEventId = new InOutImageEventId(this.InOutEventId.DocumentNumber, sequenceId, this.InOutEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IInOutImageEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IInOutEvent oe, IInOutImageEvent e)
		{
			if (!oe.InOutEventId.DocumentNumber.Equals(e.InOutImageEventId.InOutDocumentNumber))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id DocumentNumber {0} but inner id InOutDocumentNumber {1}", 
					oe.InOutEventId.DocumentNumber, e.InOutImageEventId.InOutDocumentNumber);
			}
		}


		protected IInOutLineEventDao InOutLineEventDao
		{
			get { return ApplicationContext.Current["InOutLineEventDao"] as IInOutLineEventDao; }
		}

        protected InOutLineEventId NewInOutLineEventId(string lineNumber)
        {
            var stateEventId = new InOutLineEventId(this.InOutEventId.DocumentNumber, lineNumber, this.InOutEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IInOutLineEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IInOutEvent oe, IInOutLineEvent e)
		{
			if (!oe.InOutEventId.DocumentNumber.Equals(e.InOutLineEventId.InOutDocumentNumber))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id DocumentNumber {0} but inner id InOutDocumentNumber {1}", 
					oe.InOutEventId.DocumentNumber, e.InOutLineEventId.InOutDocumentNumber);
			}
		}



        string IEventDto.EventType
        {
            get { return this.GetEventType(); }
        }

        protected abstract string GetEventType();

	}

    public abstract class InOutStateEventBase : InOutEventBase, IInOutStateEvent
    {

		public virtual string DocumentStatusId { get; set; }

		public virtual bool? Posted { get; set; }

		public virtual bool? Processed { get; set; }

		public virtual string Processing { get; set; }

		public virtual string DocumentTypeId { get; set; }

		public virtual string Description { get; set; }

		public virtual string OrderId { get; set; }

		public virtual DateTime? DateOrdered { get; set; }

		public virtual bool? IsPrinted { get; set; }

		public virtual string MovementTypeId { get; set; }

		public virtual DateTime? MovementDate { get; set; }

		public virtual string BusinessPartnerId { get; set; }

		public virtual string WarehouseId { get; set; }

		public virtual string POReference { get; set; }

		public virtual decimal? FreightAmount { get; set; }

		public virtual string ShipperId { get; set; }

		public virtual decimal? ChargeAmount { get; set; }

		public virtual DateTime? DatePrinted { get; set; }

		public virtual string CreatedFrom { get; set; }

		public virtual string SalesRepresentativeId { get; set; }

		public virtual int? NumberOfPackages { get; set; }

		public virtual DateTime? PickDate { get; set; }

		public virtual DateTime? ShipDate { get; set; }

		public virtual string TrackingNumber { get; set; }

		public virtual DateTime? DateReceived { get; set; }

		public virtual bool? IsInTransit { get; set; }

		public virtual bool? IsApproved { get; set; }

		public virtual bool? IsInDispute { get; set; }

		public virtual string RmaDocumentNumber { get; set; }

		public virtual string ReversalDocumentNumber { get; set; }

		public virtual bool? Active { get; set; }

        protected InOutStateEventBase() : base()
        {
        }

        protected InOutStateEventBase(InOutEventId stateEventId) : base(stateEventId)
        {
        }

    }

	public class InOutStateCreated : InOutStateEventBase, IInOutStateCreated, ISaveable
	{
		public InOutStateCreated () : this(new InOutEventId())
		{
		}

		public InOutStateCreated (InOutEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<InOutImageEventId, IInOutImageStateCreated> _inOutImageEvents = new Dictionary<InOutImageEventId, IInOutImageStateCreated>();
        
        private IEnumerable<IInOutImageStateCreated> _readOnlyInOutImageEvents;

        public virtual IEnumerable<IInOutImageStateCreated> InOutImageEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._inOutImageEvents.Values;
                }
                else
                {
                    if (_readOnlyInOutImageEvents != null) { return _readOnlyInOutImageEvents; }
                    var eventDao = InOutImageEventDao;
                    var eL = new List<IInOutImageStateCreated>();
                    foreach (var e in eventDao.FindByInOutEventId(this.InOutEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IInOutImageStateCreated)e);
                    }
                    return (_readOnlyInOutImageEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddInOutImageEvent(e);
                    }
                }
                else { this._inOutImageEvents.Clear(); }
            }
        }
    
		public virtual void AddInOutImageEvent(IInOutImageStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._inOutImageEvents[e.InOutImageEventId] = e;
		}

        public virtual IInOutImageStateCreated NewInOutImageStateCreated(string sequenceId)
        {
            var stateEvent = new InOutImageStateCreated(NewInOutImageEventId(sequenceId));
            return stateEvent;
        }

		private Dictionary<InOutLineEventId, IInOutLineStateCreated> _inOutLineEvents = new Dictionary<InOutLineEventId, IInOutLineStateCreated>();
        
        private IEnumerable<IInOutLineStateCreated> _readOnlyInOutLineEvents;

        public virtual IEnumerable<IInOutLineStateCreated> InOutLineEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._inOutLineEvents.Values;
                }
                else
                {
                    if (_readOnlyInOutLineEvents != null) { return _readOnlyInOutLineEvents; }
                    var eventDao = InOutLineEventDao;
                    var eL = new List<IInOutLineStateCreated>();
                    foreach (var e in eventDao.FindByInOutEventId(this.InOutEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IInOutLineStateCreated)e);
                    }
                    return (_readOnlyInOutLineEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddInOutLineEvent(e);
                    }
                }
                else { this._inOutLineEvents.Clear(); }
            }
        }
    
		public virtual void AddInOutLineEvent(IInOutLineStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._inOutLineEvents[e.InOutLineEventId] = e;
		}

        public virtual IInOutLineStateCreated NewInOutLineStateCreated(string lineNumber)
        {
            var stateEvent = new InOutLineStateCreated(NewInOutLineEventId(lineNumber));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IInOutImageStateCreated e in this.InOutImageEvents) {
				InOutImageEventDao.Save(e);
			}
			foreach (IInOutLineStateCreated e in this.InOutLineEvents) {
				InOutLineEventDao.Save(e);
			}
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class InOutStateMergePatched : InOutStateEventBase, IInOutStateMergePatched, ISaveable
	{
		public virtual bool IsPropertyDocumentStatusIdRemoved { get; set; }

		public virtual bool IsPropertyPostedRemoved { get; set; }

		public virtual bool IsPropertyProcessedRemoved { get; set; }

		public virtual bool IsPropertyProcessingRemoved { get; set; }

		public virtual bool IsPropertyDocumentTypeIdRemoved { get; set; }

		public virtual bool IsPropertyDescriptionRemoved { get; set; }

		public virtual bool IsPropertyOrderIdRemoved { get; set; }

		public virtual bool IsPropertyDateOrderedRemoved { get; set; }

		public virtual bool IsPropertyIsPrintedRemoved { get; set; }

		public virtual bool IsPropertyMovementTypeIdRemoved { get; set; }

		public virtual bool IsPropertyMovementDateRemoved { get; set; }

		public virtual bool IsPropertyBusinessPartnerIdRemoved { get; set; }

		public virtual bool IsPropertyWarehouseIdRemoved { get; set; }

		public virtual bool IsPropertyPOReferenceRemoved { get; set; }

		public virtual bool IsPropertyFreightAmountRemoved { get; set; }

		public virtual bool IsPropertyShipperIdRemoved { get; set; }

		public virtual bool IsPropertyChargeAmountRemoved { get; set; }

		public virtual bool IsPropertyDatePrintedRemoved { get; set; }

		public virtual bool IsPropertyCreatedFromRemoved { get; set; }

		public virtual bool IsPropertySalesRepresentativeIdRemoved { get; set; }

		public virtual bool IsPropertyNumberOfPackagesRemoved { get; set; }

		public virtual bool IsPropertyPickDateRemoved { get; set; }

		public virtual bool IsPropertyShipDateRemoved { get; set; }

		public virtual bool IsPropertyTrackingNumberRemoved { get; set; }

		public virtual bool IsPropertyDateReceivedRemoved { get; set; }

		public virtual bool IsPropertyIsInTransitRemoved { get; set; }

		public virtual bool IsPropertyIsApprovedRemoved { get; set; }

		public virtual bool IsPropertyIsInDisputeRemoved { get; set; }

		public virtual bool IsPropertyRmaDocumentNumberRemoved { get; set; }

		public virtual bool IsPropertyReversalDocumentNumberRemoved { get; set; }

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public InOutStateMergePatched ()
		{
		}

		public InOutStateMergePatched (InOutEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<InOutImageEventId, IInOutImageEvent> _inOutImageEvents = new Dictionary<InOutImageEventId, IInOutImageEvent>();

        private IEnumerable<IInOutImageEvent> _readOnlyInOutImageEvents;
        
        public virtual IEnumerable<IInOutImageEvent> InOutImageEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._inOutImageEvents.Values;
                }
                else
                {
                    if (_readOnlyInOutImageEvents != null) { return _readOnlyInOutImageEvents; }
                    var eventDao = InOutImageEventDao;
                    var eL = new List<IInOutImageEvent>();
                    foreach (var e in eventDao.FindByInOutEventId(this.InOutEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IInOutImageEvent)e);
                    }
                    return (_readOnlyInOutImageEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddInOutImageEvent(e);
                    }
                }
                else { this._inOutImageEvents.Clear(); }
            }
        }

		public virtual void AddInOutImageEvent(IInOutImageEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._inOutImageEvents[e.InOutImageEventId] = e;
		}

        public virtual IInOutImageStateCreated NewInOutImageStateCreated(string sequenceId)
        {
            var stateEvent = new InOutImageStateCreated(NewInOutImageEventId(sequenceId));
            return stateEvent;
        }

        public virtual IInOutImageStateMergePatched NewInOutImageStateMergePatched(string sequenceId)
        {
            var stateEvent = new InOutImageStateMergePatched(NewInOutImageEventId(sequenceId));
            return stateEvent;
        }

        public virtual IInOutImageStateRemoved NewInOutImageStateRemoved(string sequenceId)
        {
            var stateEvent = new InOutImageStateRemoved(NewInOutImageEventId(sequenceId));
            return stateEvent;
        }

		private Dictionary<InOutLineEventId, IInOutLineEvent> _inOutLineEvents = new Dictionary<InOutLineEventId, IInOutLineEvent>();

        private IEnumerable<IInOutLineEvent> _readOnlyInOutLineEvents;
        
        public virtual IEnumerable<IInOutLineEvent> InOutLineEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._inOutLineEvents.Values;
                }
                else
                {
                    if (_readOnlyInOutLineEvents != null) { return _readOnlyInOutLineEvents; }
                    var eventDao = InOutLineEventDao;
                    var eL = new List<IInOutLineEvent>();
                    foreach (var e in eventDao.FindByInOutEventId(this.InOutEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IInOutLineEvent)e);
                    }
                    return (_readOnlyInOutLineEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddInOutLineEvent(e);
                    }
                }
                else { this._inOutLineEvents.Clear(); }
            }
        }

		public virtual void AddInOutLineEvent(IInOutLineEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._inOutLineEvents[e.InOutLineEventId] = e;
		}

        public virtual IInOutLineStateCreated NewInOutLineStateCreated(string lineNumber)
        {
            var stateEvent = new InOutLineStateCreated(NewInOutLineEventId(lineNumber));
            return stateEvent;
        }

        public virtual IInOutLineStateMergePatched NewInOutLineStateMergePatched(string lineNumber)
        {
            var stateEvent = new InOutLineStateMergePatched(NewInOutLineEventId(lineNumber));
            return stateEvent;
        }

        public virtual IInOutLineStateRemoved NewInOutLineStateRemoved(string lineNumber)
        {
            var stateEvent = new InOutLineStateRemoved(NewInOutLineEventId(lineNumber));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IInOutImageEvent e in this.InOutImageEvents) {
				InOutImageEventDao.Save(e);
			}
			foreach (IInOutLineEvent e in this.InOutLineEvents) {
				InOutLineEventDao.Save(e);
			}
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}




}

