// <autogenerated>
//   This file was generated by T4 code generator GenerateInOutDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InOut;

namespace Dddml.Wms.Domain.InOut
{

	public static partial class InOutStateInterfaceExtension
	{

        public static IInOutCommand ToCreateOrMergePatchInOut<TCreateInOut, TMergePatchInOut, TCreateInOutImage, TMergePatchInOutImage, TCreateInOutLine, TMergePatchInOutLine, TCreateInOutLineImage, TMergePatchInOutLineImage>(this IInOutState state)
            where TCreateInOut : ICreateInOut, new()
            where TMergePatchInOut : IMergePatchInOut, new()
            where TCreateInOutImage : ICreateInOutImage, new()
            where TMergePatchInOutImage : IMergePatchInOutImage, new()
            where TCreateInOutLine : ICreateInOutLine, new()
            where TMergePatchInOutLine : IMergePatchInOutLine, new()
            where TCreateInOutLineImage : ICreateInOutLineImage, new()
            where TMergePatchInOutLineImage : IMergePatchInOutLineImage, new()
        {
            bool bUnsaved = ((IInOutState)state).IsUnsaved;
            if (bUnsaved)
            {
                return state.ToCreateInOut<TCreateInOut, TCreateInOutImage, TCreateInOutLine, TCreateInOutLineImage>();
            }
            else 
            {
                return state.ToMergePatchInOut<TMergePatchInOut, TCreateInOutImage, TMergePatchInOutImage, TCreateInOutLine, TMergePatchInOutLine, TCreateInOutLineImage, TMergePatchInOutLineImage>();
            }
        }

        public static TDeleteInOut ToDeleteInOut<TDeleteInOut>(this IInOutState state)
            where TDeleteInOut : IDeleteInOut, new()
        {
            var cmd = new TDeleteInOut();
            cmd.DocumentNumber = state.DocumentNumber;
            cmd.Version = ((IInOutStateProperties)state).Version;

            return cmd;
        }

        public static TMergePatchInOut ToMergePatchInOut<TMergePatchInOut, TCreateInOutImage, TMergePatchInOutImage, TCreateInOutLine, TMergePatchInOutLine, TCreateInOutLineImage, TMergePatchInOutLineImage>(this IInOutState state)
            where TMergePatchInOut : IMergePatchInOut, new()
            where TCreateInOutImage : ICreateInOutImage, new()
            where TMergePatchInOutImage : IMergePatchInOutImage, new()
            where TCreateInOutLine : ICreateInOutLine, new()
            where TMergePatchInOutLine : IMergePatchInOutLine, new()
            where TCreateInOutLineImage : ICreateInOutLineImage, new()
            where TMergePatchInOutLineImage : IMergePatchInOutLineImage, new()
        {
            var cmd = new TMergePatchInOut();

            cmd.Version = ((IInOutStateProperties)state).Version;

            cmd.DocumentNumber = state.DocumentNumber;
            cmd.Posted = state.Posted;
            cmd.Processed = state.Processed;
            cmd.Processing = state.Processing;
            cmd.DocumentTypeId = state.DocumentTypeId;
            cmd.Description = state.Description;
            cmd.OrderId = state.OrderId;
            cmd.DateOrdered = state.DateOrdered;
            cmd.IsPrinted = state.IsPrinted;
            cmd.MovementTypeId = state.MovementTypeId;
            cmd.MovementDate = state.MovementDate;
            cmd.BusinessPartnerId = state.BusinessPartnerId;
            cmd.WarehouseId = state.WarehouseId;
            cmd.POReference = state.POReference;
            cmd.FreightAmount = state.FreightAmount;
            cmd.ShipperId = state.ShipperId;
            cmd.ChargeAmount = state.ChargeAmount;
            cmd.DatePrinted = state.DatePrinted;
            cmd.CreatedFrom = state.CreatedFrom;
            cmd.SalesRepresentativeId = state.SalesRepresentativeId;
            cmd.NumberOfPackages = state.NumberOfPackages;
            cmd.PickDate = state.PickDate;
            cmd.ShipDate = state.ShipDate;
            cmd.TrackingNumber = state.TrackingNumber;
            cmd.DateReceived = state.DateReceived;
            cmd.IsInTransit = state.IsInTransit;
            cmd.IsApproved = state.IsApproved;
            cmd.IsInDispute = state.IsInDispute;
            cmd.RmaDocumentNumber = state.RmaDocumentNumber;
            cmd.ReversalDocumentNumber = state.ReversalDocumentNumber;
            cmd.Active = ((IInOutStateProperties)state).Active;
            
            if (state.Processing == null) { cmd.IsPropertyProcessingRemoved = true; }
            if (state.DocumentTypeId == null) { cmd.IsPropertyDocumentTypeIdRemoved = true; }
            if (state.Description == null) { cmd.IsPropertyDescriptionRemoved = true; }
            if (state.OrderId == null) { cmd.IsPropertyOrderIdRemoved = true; }
            if (state.DateOrdered == null) { cmd.IsPropertyDateOrderedRemoved = true; }
            if (state.MovementTypeId == null) { cmd.IsPropertyMovementTypeIdRemoved = true; }
            if (state.MovementDate == null) { cmd.IsPropertyMovementDateRemoved = true; }
            if (state.BusinessPartnerId == null) { cmd.IsPropertyBusinessPartnerIdRemoved = true; }
            if (state.WarehouseId == null) { cmd.IsPropertyWarehouseIdRemoved = true; }
            if (state.POReference == null) { cmd.IsPropertyPOReferenceRemoved = true; }
            if (state.ShipperId == null) { cmd.IsPropertyShipperIdRemoved = true; }
            if (state.DatePrinted == null) { cmd.IsPropertyDatePrintedRemoved = true; }
            if (state.CreatedFrom == null) { cmd.IsPropertyCreatedFromRemoved = true; }
            if (state.SalesRepresentativeId == null) { cmd.IsPropertySalesRepresentativeIdRemoved = true; }
            if (state.PickDate == null) { cmd.IsPropertyPickDateRemoved = true; }
            if (state.ShipDate == null) { cmd.IsPropertyShipDateRemoved = true; }
            if (state.TrackingNumber == null) { cmd.IsPropertyTrackingNumberRemoved = true; }
            if (state.DateReceived == null) { cmd.IsPropertyDateReceivedRemoved = true; }
            if (state.RmaDocumentNumber == null) { cmd.IsPropertyRmaDocumentNumberRemoved = true; }
            if (state.ReversalDocumentNumber == null) { cmd.IsPropertyReversalDocumentNumberRemoved = true; }
            foreach (var d in state.InOutImages)
            {
                var c = d.ToCreateOrMergePatchInOutImage<TCreateInOutImage, TMergePatchInOutImage>();
                cmd.InOutImageCommands.Add(c);
            }
            foreach (var d in state.InOutLines)
            {
                var c = d.ToCreateOrMergePatchInOutLine<TCreateInOutLine, TMergePatchInOutLine, TCreateInOutLineImage, TMergePatchInOutLineImage>();
                cmd.InOutLineCommands.Add(c);
            }
            return cmd;
        }

        public static TCreateInOut ToCreateInOut<TCreateInOut, TCreateInOutImage, TCreateInOutLine, TCreateInOutLineImage>(this IInOutState state)
            where TCreateInOut : ICreateInOut, new()
            where TCreateInOutImage : ICreateInOutImage, new()
            where TCreateInOutLine : ICreateInOutLine, new()
            where TCreateInOutLineImage : ICreateInOutLineImage, new()
        {
            var cmd = new TCreateInOut();

            cmd.Version = ((IInOutStateProperties)state).Version;

            cmd.DocumentNumber = state.DocumentNumber;
            cmd.Posted = state.Posted;
            cmd.Processed = state.Processed;
            cmd.Processing = state.Processing;
            cmd.DocumentTypeId = state.DocumentTypeId;
            cmd.Description = state.Description;
            cmd.OrderId = state.OrderId;
            cmd.DateOrdered = state.DateOrdered;
            cmd.IsPrinted = state.IsPrinted;
            cmd.MovementTypeId = state.MovementTypeId;
            cmd.MovementDate = state.MovementDate;
            cmd.BusinessPartnerId = state.BusinessPartnerId;
            cmd.WarehouseId = state.WarehouseId;
            cmd.POReference = state.POReference;
            cmd.FreightAmount = state.FreightAmount;
            cmd.ShipperId = state.ShipperId;
            cmd.ChargeAmount = state.ChargeAmount;
            cmd.DatePrinted = state.DatePrinted;
            cmd.CreatedFrom = state.CreatedFrom;
            cmd.SalesRepresentativeId = state.SalesRepresentativeId;
            cmd.NumberOfPackages = state.NumberOfPackages;
            cmd.PickDate = state.PickDate;
            cmd.ShipDate = state.ShipDate;
            cmd.TrackingNumber = state.TrackingNumber;
            cmd.DateReceived = state.DateReceived;
            cmd.IsInTransit = state.IsInTransit;
            cmd.IsApproved = state.IsApproved;
            cmd.IsInDispute = state.IsInDispute;
            cmd.RmaDocumentNumber = state.RmaDocumentNumber;
            cmd.ReversalDocumentNumber = state.ReversalDocumentNumber;
            cmd.Active = ((IInOutStateProperties)state).Active;
            foreach (var d in state.InOutImages)
            {
                var c = d.ToCreateInOutImage<TCreateInOutImage>();
                cmd.InOutImages.Add(c);
            }
            foreach (var d in state.InOutLines)
            {
                var c = d.ToCreateInOutLine<TCreateInOutLine, TCreateInOutLineImage>();
                cmd.InOutLines.Add(c);
            }
            return cmd;
        }
		

	}

}

