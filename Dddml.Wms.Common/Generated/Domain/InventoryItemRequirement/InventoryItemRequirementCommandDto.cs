// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemRequirementDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItemRequirement;
using Dddml.Wms.Domain.InventoryItem;
using Dddml.Wms.Domain.InventoryPRTriggered;

namespace Dddml.Wms.Domain.InventoryItemRequirement
{

	public abstract class InventoryItemRequirementCommandDtoBase : ICommandDto, ICreateInventoryItemRequirement, IMergePatchInventoryItemRequirement, IDeleteInventoryItemRequirement
	{

		InventoryItemId IAggregateCommand<InventoryItemId, long>.AggregateId
		{
			get
			{
				return ((ICreateOrMergePatchOrDeleteInventoryItemRequirement)this).InventoryItemRequirementId;
			}
		}


		long IAggregateCommand<InventoryItemId, long>.AggregateVersion
		{
			get
			{
				return this.Version != null ? this.Version.Value : default(long);
			}
		}

        long IInventoryItemRequirementCommand.Version
        {
            get { return this.Version != null ? this.Version.Value : default(long); }
            set { this.Version = value; }
        }

		public virtual long? Version { get; set; }

		public virtual string RequesterId { get; set; }

		public virtual string CommandId { get; set; }

        object ICommand.RequesterId
        {
            get { return this.RequesterId; }
            set { this.RequesterId = (string)value; }
        }

        string ICommand.CommandId
        {
            get { return this.CommandId; }
            set { this.CommandId = value; }
        }

		public virtual InventoryItemId InventoryItemRequirementId { get; set; }

		public virtual bool? Active { get; set; }

		public virtual bool? IsPropertyActiveRemoved { get; set; }

        bool IMergePatchInventoryItemRequirement.IsPropertyActiveRemoved
        {
            get
            {
                var b = this.IsPropertyActiveRemoved;
                if (b != null && b.HasValue)
                {
                    return b.Value;
                }
                return false;
            }
            set
            {
                this.IsPropertyActiveRemoved = value;
            }
        }

        ICreateInventoryItemRequirementEntryCommands ICreateInventoryItemRequirement.Entries
        {
            get
            {
                return this._entries;
            }
        }

        IInventoryItemRequirementEntryCommands IMergePatchInventoryItemRequirement.InventoryItemRequirementEntryCommands
        {
            get
            {
                return this._entries;
            }
        }

        public virtual CreateInventoryItemRequirementEntryDto NewCreateInventoryItemRequirementEntry()
        {
            var c = new CreateInventoryItemRequirementEntryDto();
            c.InventoryItemRequirementId = this.InventoryItemRequirementId;

            return c;
        }

        ICreateInventoryItemRequirementEntry ICreateInventoryItemRequirement.NewCreateInventoryItemRequirementEntry()
        {
            return this.NewCreateInventoryItemRequirementEntry();
        }

        ICreateInventoryItemRequirementEntry IMergePatchInventoryItemRequirement.NewCreateInventoryItemRequirementEntry()
        {
            return this.NewCreateInventoryItemRequirementEntry();
        }

        public virtual MergePatchInventoryItemRequirementEntryDto NewMergePatchInventoryItemRequirementEntry()
        {
            var c = new MergePatchInventoryItemRequirementEntryDto();
            c.InventoryItemRequirementId = this.InventoryItemRequirementId;

            return c;
        }

        public virtual RemoveInventoryItemRequirementEntryDto NewRemoveInventoryItemRequirementEntry()
        {
            var c = new RemoveInventoryItemRequirementEntryDto();
            c.InventoryItemRequirementId = this.InventoryItemRequirementId;

            return c;
        }

        private CreateOrMergePatchOrRemoveInventoryItemRequirementEntryDtos _entries = new CreateOrMergePatchOrRemoveInventoryItemRequirementEntryDtos();

        public virtual CreateOrMergePatchOrRemoveInventoryItemRequirementEntryDto[] Entries
        {
            get
            {
                return _entries.ToArray();
            }
            set
            {
                _entries.Clear();
                _entries.AddRange(value);
            }
        }


        string ICommandDto.CommandType 
        {
            get { return this.GetCommandType(); }
        }

        protected abstract string GetCommandType();

	}


    public class CreateOrMergePatchOrDeleteInventoryItemRequirementDto : InventoryItemRequirementCommandDtoBase
    {
        private string _commandType;

        public virtual string CommandType
        {
            get { return _commandType; }
            set { _commandType = value; }
        }

        protected override string GetCommandType()
        {
            return this._commandType;
        }

    }



	public class CreateInventoryItemRequirementDto : CreateOrMergePatchOrDeleteInventoryItemRequirementDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Create;
        }

	}


	public class MergePatchInventoryItemRequirementDto : CreateOrMergePatchOrDeleteInventoryItemRequirementDto
	{

        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.MergePatch;
        }

	}

	public class DeleteInventoryItemRequirementDto : CreateOrMergePatchOrDeleteInventoryItemRequirementDto
	{
        protected override string GetCommandType()
        {
            return Dddml.Wms.Specialization.CommandType.Delete;
        }


        public override string CommandType
        {
            get { return this.GetCommandType(); }
            set { 
				// do nothing
            }
        }

	}

    public static partial class InventoryItemRequirementCommandDtos
    {

    }

}

