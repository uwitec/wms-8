// <autogenerated>
//   This file was generated by T4 code generator GenerateProductDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Product;

namespace Dddml.Wms.Domain.Product
{

	public abstract class ProductEventBase : IProductEvent
	{

		public virtual ProductEventId ProductEventId { get; set; }

        public virtual string ProductId
        {
            get { return ProductEventId.ProductId; }
            set { ProductEventId.ProductId = value; }
        }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		ProductEventId IGlobalIdentity<ProductEventId>.GlobalId {
			get
			{
				return this.ProductEventId;
			}
		}

        public virtual bool EventReadOnly { get; set; }

        bool IProductEvent.ReadOnly
        {
            get
            {
                return this.EventReadOnly;
            }
            set
            {
                this.EventReadOnly = value;
            }
        }


		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}

        protected ProductEventBase()
        {
        }

        protected ProductEventBase(ProductEventId stateEventId)
        {
            this.ProductEventId = stateEventId;
        }

		protected IGoodIdentificationEventDao GoodIdentificationEventDao
		{
			get { return ApplicationContext.Current["GoodIdentificationEventDao"] as IGoodIdentificationEventDao; }
		}

        protected GoodIdentificationEventId NewGoodIdentificationEventId(string goodIdentificationTypeId)
        {
            var stateEventId = new GoodIdentificationEventId(this.ProductEventId.ProductId, goodIdentificationTypeId, this.ProductEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IGoodIdentificationEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IProductEvent oe, IGoodIdentificationEvent e)
		{
			if (!oe.ProductEventId.ProductId.Equals(e.GoodIdentificationEventId.ProductId))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id ProductId {0} but inner id ProductId {1}", 
					oe.ProductEventId.ProductId, e.GoodIdentificationEventId.ProductId);
			}
		}



        string IEventDto.EventType
        {
            get { return this.GetEventType(); }
        }

        protected abstract string GetEventType();

	}

    public abstract class ProductStateEventBase : ProductEventBase, IProductStateEvent
    {

		public virtual string ProductTypeId { get; set; }

		public virtual string PrimaryProductCategoryId { get; set; }

		public virtual string ManufacturerPartyId { get; set; }

		public virtual string FacilityId { get; set; }

		public virtual DateTime? IntroductionDate { get; set; }

		public virtual DateTime? ReleaseDate { get; set; }

		public virtual DateTime? SupportDiscontinuationDate { get; set; }

		public virtual DateTime? SalesDiscontinuationDate { get; set; }

		public virtual string SalesDiscWhenNotAvail { get; set; }

		public virtual string InternalName { get; set; }

		public virtual string BrandName { get; set; }

		public virtual string Comments { get; set; }

		public virtual string ProductName { get; set; }

		public virtual string Description { get; set; }

		public virtual string PriceDetailText { get; set; }

		public virtual string SmallImageUrl { get; set; }

		public virtual string MediumImageUrl { get; set; }

		public virtual string LargeImageUrl { get; set; }

		public virtual string DetailImageUrl { get; set; }

		public virtual string OriginalImageUrl { get; set; }

		public virtual string DetailScreen { get; set; }

		public virtual string InventoryMessage { get; set; }

		public virtual string InventoryItemTypeId { get; set; }

		public virtual string RequireInventory { get; set; }

		public virtual string QuantityUomId { get; set; }

		public virtual decimal? QuantityIncluded { get; set; }

		public virtual long? PiecesIncluded { get; set; }

		public virtual string RequireAmount { get; set; }

		public virtual decimal? FixedAmount { get; set; }

		public virtual string AmountUomTypeId { get; set; }

		public virtual string WeightUomId { get; set; }

		public virtual decimal? ShippingWeight { get; set; }

		public virtual decimal? ProductWeight { get; set; }

		public virtual string HeightUomId { get; set; }

		public virtual decimal? ProductHeight { get; set; }

		public virtual decimal? ShippingHeight { get; set; }

		public virtual string WidthUomId { get; set; }

		public virtual decimal? ProductWidth { get; set; }

		public virtual decimal? ShippingWidth { get; set; }

		public virtual string DepthUomId { get; set; }

		public virtual decimal? ProductDepth { get; set; }

		public virtual decimal? ShippingDepth { get; set; }

		public virtual string DiameterUomId { get; set; }

		public virtual decimal? ProductDiameter { get; set; }

		public virtual decimal? ProductRating { get; set; }

		public virtual string RatingTypeEnum { get; set; }

		public virtual string Returnable { get; set; }

		public virtual string Taxable { get; set; }

		public virtual string ChargeShipping { get; set; }

		public virtual string AutoCreateKeywords { get; set; }

		public virtual string IncludeInPromotions { get; set; }

		public virtual string IsVirtual { get; set; }

		public virtual string IsVariant { get; set; }

		public virtual string VirtualVariantMethodEnum { get; set; }

		public virtual string InShippingBox { get; set; }

		public virtual string DefaultShipmentBoxTypeId { get; set; }

		public virtual bool? IsSerialNumbered { get; set; }

		public virtual bool? IsManagedByLot { get; set; }

		public virtual string AttributeSetId { get; set; }

		public virtual string AttributeSetInstanceId { get; set; }

		public virtual string Grade { get; set; }

		public virtual decimal? Gsm { get; set; }

		public virtual decimal? CoreDiameter { get; set; }

		public virtual decimal? OutsideDiameter { get; set; }

		public virtual decimal? MoisturePct { get; set; }

		public virtual bool? Active { get; set; }

        protected ProductStateEventBase() : base()
        {
        }

        protected ProductStateEventBase(ProductEventId stateEventId) : base(stateEventId)
        {
        }

    }

	public class ProductStateCreated : ProductStateEventBase, IProductStateCreated, ISaveable
	{
		public ProductStateCreated () : this(new ProductEventId())
		{
		}

		public ProductStateCreated (ProductEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<GoodIdentificationEventId, IGoodIdentificationStateCreated> _goodIdentificationEvents = new Dictionary<GoodIdentificationEventId, IGoodIdentificationStateCreated>();
        
        private IEnumerable<IGoodIdentificationStateCreated> _readOnlyGoodIdentificationEvents;

        public virtual IEnumerable<IGoodIdentificationStateCreated> GoodIdentificationEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._goodIdentificationEvents.Values;
                }
                else
                {
                    if (_readOnlyGoodIdentificationEvents != null) { return _readOnlyGoodIdentificationEvents; }
                    var eventDao = GoodIdentificationEventDao;
                    var eL = new List<IGoodIdentificationStateCreated>();
                    foreach (var e in eventDao.FindByProductEventId(this.ProductEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IGoodIdentificationStateCreated)e);
                    }
                    return (_readOnlyGoodIdentificationEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddGoodIdentificationEvent(e);
                    }
                }
                else { this._goodIdentificationEvents.Clear(); }
            }
        }
    
		public virtual void AddGoodIdentificationEvent(IGoodIdentificationStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._goodIdentificationEvents[e.GoodIdentificationEventId] = e;
		}

        public virtual IGoodIdentificationStateCreated NewGoodIdentificationStateCreated(string goodIdentificationTypeId)
        {
            var stateEvent = new GoodIdentificationStateCreated(NewGoodIdentificationEventId(goodIdentificationTypeId));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IGoodIdentificationStateCreated e in this.GoodIdentificationEvents) {
				GoodIdentificationEventDao.Save(e);
			}
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class ProductStateMergePatched : ProductStateEventBase, IProductStateMergePatched, ISaveable
	{
		public virtual bool IsPropertyProductTypeIdRemoved { get; set; }

		public virtual bool IsPropertyPrimaryProductCategoryIdRemoved { get; set; }

		public virtual bool IsPropertyManufacturerPartyIdRemoved { get; set; }

		public virtual bool IsPropertyFacilityIdRemoved { get; set; }

		public virtual bool IsPropertyIntroductionDateRemoved { get; set; }

		public virtual bool IsPropertyReleaseDateRemoved { get; set; }

		public virtual bool IsPropertySupportDiscontinuationDateRemoved { get; set; }

		public virtual bool IsPropertySalesDiscontinuationDateRemoved { get; set; }

		public virtual bool IsPropertySalesDiscWhenNotAvailRemoved { get; set; }

		public virtual bool IsPropertyInternalNameRemoved { get; set; }

		public virtual bool IsPropertyBrandNameRemoved { get; set; }

		public virtual bool IsPropertyCommentsRemoved { get; set; }

		public virtual bool IsPropertyProductNameRemoved { get; set; }

		public virtual bool IsPropertyDescriptionRemoved { get; set; }

		public virtual bool IsPropertyPriceDetailTextRemoved { get; set; }

		public virtual bool IsPropertySmallImageUrlRemoved { get; set; }

		public virtual bool IsPropertyMediumImageUrlRemoved { get; set; }

		public virtual bool IsPropertyLargeImageUrlRemoved { get; set; }

		public virtual bool IsPropertyDetailImageUrlRemoved { get; set; }

		public virtual bool IsPropertyOriginalImageUrlRemoved { get; set; }

		public virtual bool IsPropertyDetailScreenRemoved { get; set; }

		public virtual bool IsPropertyInventoryMessageRemoved { get; set; }

		public virtual bool IsPropertyInventoryItemTypeIdRemoved { get; set; }

		public virtual bool IsPropertyRequireInventoryRemoved { get; set; }

		public virtual bool IsPropertyQuantityUomIdRemoved { get; set; }

		public virtual bool IsPropertyQuantityIncludedRemoved { get; set; }

		public virtual bool IsPropertyPiecesIncludedRemoved { get; set; }

		public virtual bool IsPropertyRequireAmountRemoved { get; set; }

		public virtual bool IsPropertyFixedAmountRemoved { get; set; }

		public virtual bool IsPropertyAmountUomTypeIdRemoved { get; set; }

		public virtual bool IsPropertyWeightUomIdRemoved { get; set; }

		public virtual bool IsPropertyShippingWeightRemoved { get; set; }

		public virtual bool IsPropertyProductWeightRemoved { get; set; }

		public virtual bool IsPropertyHeightUomIdRemoved { get; set; }

		public virtual bool IsPropertyProductHeightRemoved { get; set; }

		public virtual bool IsPropertyShippingHeightRemoved { get; set; }

		public virtual bool IsPropertyWidthUomIdRemoved { get; set; }

		public virtual bool IsPropertyProductWidthRemoved { get; set; }

		public virtual bool IsPropertyShippingWidthRemoved { get; set; }

		public virtual bool IsPropertyDepthUomIdRemoved { get; set; }

		public virtual bool IsPropertyProductDepthRemoved { get; set; }

		public virtual bool IsPropertyShippingDepthRemoved { get; set; }

		public virtual bool IsPropertyDiameterUomIdRemoved { get; set; }

		public virtual bool IsPropertyProductDiameterRemoved { get; set; }

		public virtual bool IsPropertyProductRatingRemoved { get; set; }

		public virtual bool IsPropertyRatingTypeEnumRemoved { get; set; }

		public virtual bool IsPropertyReturnableRemoved { get; set; }

		public virtual bool IsPropertyTaxableRemoved { get; set; }

		public virtual bool IsPropertyChargeShippingRemoved { get; set; }

		public virtual bool IsPropertyAutoCreateKeywordsRemoved { get; set; }

		public virtual bool IsPropertyIncludeInPromotionsRemoved { get; set; }

		public virtual bool IsPropertyIsVirtualRemoved { get; set; }

		public virtual bool IsPropertyIsVariantRemoved { get; set; }

		public virtual bool IsPropertyVirtualVariantMethodEnumRemoved { get; set; }

		public virtual bool IsPropertyInShippingBoxRemoved { get; set; }

		public virtual bool IsPropertyDefaultShipmentBoxTypeIdRemoved { get; set; }

		public virtual bool IsPropertyIsSerialNumberedRemoved { get; set; }

		public virtual bool IsPropertyIsManagedByLotRemoved { get; set; }

		public virtual bool IsPropertyAttributeSetIdRemoved { get; set; }

		public virtual bool IsPropertyAttributeSetInstanceIdRemoved { get; set; }

		public virtual bool IsPropertyGradeRemoved { get; set; }

		public virtual bool IsPropertyGsmRemoved { get; set; }

		public virtual bool IsPropertyCoreDiameterRemoved { get; set; }

		public virtual bool IsPropertyOutsideDiameterRemoved { get; set; }

		public virtual bool IsPropertyMoisturePctRemoved { get; set; }

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public ProductStateMergePatched ()
		{
		}

		public ProductStateMergePatched (ProductEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<GoodIdentificationEventId, IGoodIdentificationEvent> _goodIdentificationEvents = new Dictionary<GoodIdentificationEventId, IGoodIdentificationEvent>();

        private IEnumerable<IGoodIdentificationEvent> _readOnlyGoodIdentificationEvents;
        
        public virtual IEnumerable<IGoodIdentificationEvent> GoodIdentificationEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._goodIdentificationEvents.Values;
                }
                else
                {
                    if (_readOnlyGoodIdentificationEvents != null) { return _readOnlyGoodIdentificationEvents; }
                    var eventDao = GoodIdentificationEventDao;
                    var eL = new List<IGoodIdentificationEvent>();
                    foreach (var e in eventDao.FindByProductEventId(this.ProductEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IGoodIdentificationEvent)e);
                    }
                    return (_readOnlyGoodIdentificationEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddGoodIdentificationEvent(e);
                    }
                }
                else { this._goodIdentificationEvents.Clear(); }
            }
        }

		public virtual void AddGoodIdentificationEvent(IGoodIdentificationEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._goodIdentificationEvents[e.GoodIdentificationEventId] = e;
		}

        public virtual IGoodIdentificationStateCreated NewGoodIdentificationStateCreated(string goodIdentificationTypeId)
        {
            var stateEvent = new GoodIdentificationStateCreated(NewGoodIdentificationEventId(goodIdentificationTypeId));
            return stateEvent;
        }

        public virtual IGoodIdentificationStateMergePatched NewGoodIdentificationStateMergePatched(string goodIdentificationTypeId)
        {
            var stateEvent = new GoodIdentificationStateMergePatched(NewGoodIdentificationEventId(goodIdentificationTypeId));
            return stateEvent;
        }

        public virtual IGoodIdentificationStateRemoved NewGoodIdentificationStateRemoved(string goodIdentificationTypeId)
        {
            var stateEvent = new GoodIdentificationStateRemoved(NewGoodIdentificationEventId(goodIdentificationTypeId));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IGoodIdentificationEvent e in this.GoodIdentificationEvents) {
				GoodIdentificationEventDao.Save(e);
			}
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}




}

