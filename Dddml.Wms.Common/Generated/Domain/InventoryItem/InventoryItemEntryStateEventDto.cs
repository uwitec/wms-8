// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.InventoryItem
{

	public abstract class InventoryItemEntryStateEventDtoBase : IEventDto, IInventoryItemEntryStateCreated
	{

        private InventoryItemEntryEventId _inventoryItemEntryEventId;

		protected internal virtual InventoryItemEntryEventId InventoryItemEntryEventId 
        {
            get 
            {
                if (_inventoryItemEntryEventId == null) { _inventoryItemEntryEventId = new InventoryItemEntryEventId(); }
                return _inventoryItemEntryEventId;
            }
            set
            {
                _inventoryItemEntryEventId = value;
            }
        }

        public virtual long EntrySeqId
        {
            get { return InventoryItemEntryEventId.EntrySeqId; }
            set { InventoryItemEntryEventId.EntrySeqId = value; }
        }

		public virtual decimal? OnHandQuantity { get; set; }

		public virtual decimal? InTransitQuantity { get; set; }

		public virtual decimal? ReservedQuantity { get; set; }

		public virtual decimal? OccupiedQuantity { get; set; }

		public virtual decimal? VirtualQuantity { get; set; }

		public virtual InventoryItemSourceInfo Source { get; set; }

		public virtual DateTime? OccurredAt { get; set; }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		InventoryItemEntryEventId IGlobalIdentity<InventoryItemEntryEventId>.GlobalId {
			get 
			{
				return this.InventoryItemEntryEventId;
			}
		}

        public virtual bool EventReadOnly { get; set; }

        bool IInventoryItemEntryEvent.ReadOnly
        {
            get
            {
                return this.EventReadOnly;
            }
            set
            {
                this.EventReadOnly = value;
            }
        }

		public virtual long Version { get; set; }

		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}


        InventoryItemEntryEventId IInventoryItemEntryEvent.InventoryItemEntryEventId
        {
            get { return this.InventoryItemEntryEventId; }
        }

        protected InventoryItemEntryStateEventDtoBase()
        {
        }

        protected InventoryItemEntryStateEventDtoBase(InventoryItemEntryEventId stateEventId)
        {
            this.InventoryItemEntryEventId = stateEventId;
        }

        // //////////////////////////////////////////////////

        string IEventDto.EventType 
        {
            get { return this.GetEventType(); }
        }

        protected abstract string GetEventType();

	}


    public class InventoryItemEntryStateCreatedOrMergePatchedOrRemovedDto : InventoryItemEntryStateEventDtoBase
    {
        private string _eventType;

        public virtual string EventType
        {
            get { return _eventType; }
            set { _eventType = value; }
        }

        protected override string GetEventType()
        {
            return this._eventType;
        }

    }



	public class InventoryItemEntryStateCreatedDto : InventoryItemEntryStateCreatedOrMergePatchedOrRemovedDto
	{
		public InventoryItemEntryStateCreatedDto()
		{
		}

        public override string EventType
        {
            get { return this.GetEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class InventoryItemEntryStateMergePatchedDto : InventoryItemEntryStateCreatedOrMergePatchedOrRemovedDto
	{
		public InventoryItemEntryStateMergePatchedDto()
		{
		}

        public override string EventType
        {
            get { return this.GetEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}


	public class InventoryItemEntryStateRemovedDto : InventoryItemEntryStateCreatedOrMergePatchedOrRemovedDto
	{
		public InventoryItemEntryStateRemovedDto()
		{
		}

        public override string EventType
        {
            get { return this.GetEventType(); }
            set
            {
                // do nothing
            }
        }

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Removed;
        }

	}


    public partial class InventoryItemEntryStateCreatedOrMergePatchedOrRemovedDtos : IEnumerable<IInventoryItemEntryStateCreated>
    {
        private List<InventoryItemEntryStateCreatedOrMergePatchedOrRemovedDto> _innerStateEvents = new List<InventoryItemEntryStateCreatedOrMergePatchedOrRemovedDto>();

        public virtual InventoryItemEntryStateCreatedOrMergePatchedOrRemovedDto[] ToArray()
        {
            return _innerStateEvents.ToArray();
        }

        public virtual void Clear()
        {
            _innerStateEvents.Clear();
        }

        public virtual void AddRange(IEnumerable<InventoryItemEntryStateCreatedOrMergePatchedOrRemovedDto> es)
        {
            _innerStateEvents.AddRange(es);
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }

        IEnumerator<IInventoryItemEntryStateCreated> IEnumerable<IInventoryItemEntryStateCreated>.GetEnumerator()
        {
            return _innerStateEvents.GetEnumerator();
        }


        public void AddInventoryItemEntryEvent(IInventoryItemEntryStateCreated e)
        {
            _innerStateEvents.Add((InventoryItemEntryStateCreatedDto)e);
        }

        public void AddInventoryItemEntryEvent(IInventoryItemEntryEvent e)
        {
            _innerStateEvents.Add((InventoryItemEntryStateCreatedOrMergePatchedOrRemovedDto)e);
        }


    }


}

