// <autogenerated>
//   This file was generated by T4 code generator GenerateInventoryItemDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItem;

namespace Dddml.Wms.Domain.InventoryItem
{

    public partial class InventoryItemEntryStateDto : IInventoryItemEntryStateDto
    {
        public virtual long? EntrySeqId
        {
            get;
            set;
        }

        public virtual decimal? OnHandQuantity
        {
            get;
            set;
        }

        public virtual decimal? InTransitQuantity
        {
            get;
            set;
        }

        public virtual decimal? ReservedQuantity
        {
            get;
            set;
        }

        public virtual decimal? OccupiedQuantity
        {
            get;
            set;
        }

        public virtual decimal? VirtualQuantity
        {
            get;
            set;
        }

        public virtual InventoryItemSourceInfo Source
        {
            get;
            set;
        }

        public virtual DateTime? OccurredAt
        {
            get;
            set;
        }

        public virtual long? Version
        {
            get;
            set;
        }

        public virtual InventoryItemId InventoryItemId
        {
            get;
            set;
        }

        public virtual string CreatedBy
        {
            get;
            set;
        }

        public virtual DateTime? CreatedAt
        {
            get;
            set;
        }

        public virtual string UpdatedBy
        {
            get;
            set;
        }

        public virtual DateTime? UpdatedAt
        {
            get;
            set;
        }

        public virtual IInventoryItemEntryState ToInventoryItemEntryState()
        {
            var state = new InventoryItemEntryState(true);
            if (this.EntrySeqId != null && this.EntrySeqId.HasValue) { state.EntrySeqId = this.EntrySeqId.Value; }
            if (this.OnHandQuantity != null && this.OnHandQuantity.HasValue) { state.OnHandQuantity = this.OnHandQuantity.Value; }
            if (this.InTransitQuantity != null && this.InTransitQuantity.HasValue) { state.InTransitQuantity = this.InTransitQuantity.Value; }
            if (this.ReservedQuantity != null && this.ReservedQuantity.HasValue) { state.ReservedQuantity = this.ReservedQuantity.Value; }
            if (this.OccupiedQuantity != null && this.OccupiedQuantity.HasValue) { state.OccupiedQuantity = this.OccupiedQuantity.Value; }
            if (this.VirtualQuantity != null && this.VirtualQuantity.HasValue) { state.VirtualQuantity = this.VirtualQuantity.Value; }
            state.Source = this.Source;
            state.OccurredAt = this.OccurredAt;
            if (this.Version != null && this.Version.HasValue) { state.Version = this.Version.Value; }
            state.InventoryItemId = this.InventoryItemId;
            state.CreatedBy = this.CreatedBy;
            if (this.CreatedAt != null && this.CreatedAt.HasValue) { state.CreatedAt = this.CreatedAt.Value; }
            state.UpdatedBy = this.UpdatedBy;
            if (this.UpdatedAt != null && this.UpdatedAt.HasValue) { state.UpdatedAt = this.UpdatedAt.Value; }

            return state;
        }

    }

}

